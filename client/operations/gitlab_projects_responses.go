// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GitlabProjectsReader is a Reader for the GitlabProjects structure.
type GitlabProjectsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GitlabProjectsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGitlabProjectsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGitlabProjectsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGitlabProjectsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGitlabProjectsOK creates a GitlabProjectsOK with default headers values
func NewGitlabProjectsOK() *GitlabProjectsOK {
	return &GitlabProjectsOK{}
}

/*
GitlabProjectsOK describes a response with status code 200, with default header values.

This resource return all projects owned by the user on GitLab in JSON format.
*/
type GitlabProjectsOK struct {
}

// IsSuccess returns true when this gitlab projects o k response has a 2xx status code
func (o *GitlabProjectsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this gitlab projects o k response has a 3xx status code
func (o *GitlabProjectsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gitlab projects o k response has a 4xx status code
func (o *GitlabProjectsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this gitlab projects o k response has a 5xx status code
func (o *GitlabProjectsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this gitlab projects o k response a status code equal to that given
func (o *GitlabProjectsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GitlabProjectsOK) Error() string {
	return fmt.Sprintf("[GET /api/gitlab/projects][%d] gitlabProjectsOK ", 200)
}

func (o *GitlabProjectsOK) String() string {
	return fmt.Sprintf("[GET /api/gitlab/projects][%d] gitlabProjectsOK ", 200)
}

func (o *GitlabProjectsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGitlabProjectsForbidden creates a GitlabProjectsForbidden with default headers values
func NewGitlabProjectsForbidden() *GitlabProjectsForbidden {
	return &GitlabProjectsForbidden{}
}

/*
GitlabProjectsForbidden describes a response with status code 403, with default header values.

Request failed. User token not valid.
*/
type GitlabProjectsForbidden struct {
	Payload *GitlabProjectsForbiddenBody
}

// IsSuccess returns true when this gitlab projects forbidden response has a 2xx status code
func (o *GitlabProjectsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this gitlab projects forbidden response has a 3xx status code
func (o *GitlabProjectsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gitlab projects forbidden response has a 4xx status code
func (o *GitlabProjectsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this gitlab projects forbidden response has a 5xx status code
func (o *GitlabProjectsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this gitlab projects forbidden response a status code equal to that given
func (o *GitlabProjectsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GitlabProjectsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/gitlab/projects][%d] gitlabProjectsForbidden  %+v", 403, o.Payload)
}

func (o *GitlabProjectsForbidden) String() string {
	return fmt.Sprintf("[GET /api/gitlab/projects][%d] gitlabProjectsForbidden  %+v", 403, o.Payload)
}

func (o *GitlabProjectsForbidden) GetPayload() *GitlabProjectsForbiddenBody {
	return o.Payload
}

func (o *GitlabProjectsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GitlabProjectsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGitlabProjectsInternalServerError creates a GitlabProjectsInternalServerError with default headers values
func NewGitlabProjectsInternalServerError() *GitlabProjectsInternalServerError {
	return &GitlabProjectsInternalServerError{}
}

/*
GitlabProjectsInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal controller error.
*/
type GitlabProjectsInternalServerError struct {
	Payload *GitlabProjectsInternalServerErrorBody
}

// IsSuccess returns true when this gitlab projects internal server error response has a 2xx status code
func (o *GitlabProjectsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this gitlab projects internal server error response has a 3xx status code
func (o *GitlabProjectsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gitlab projects internal server error response has a 4xx status code
func (o *GitlabProjectsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this gitlab projects internal server error response has a 5xx status code
func (o *GitlabProjectsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this gitlab projects internal server error response a status code equal to that given
func (o *GitlabProjectsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GitlabProjectsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/gitlab/projects][%d] gitlabProjectsInternalServerError  %+v", 500, o.Payload)
}

func (o *GitlabProjectsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/gitlab/projects][%d] gitlabProjectsInternalServerError  %+v", 500, o.Payload)
}

func (o *GitlabProjectsInternalServerError) GetPayload() *GitlabProjectsInternalServerErrorBody {
	return o.Payload
}

func (o *GitlabProjectsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GitlabProjectsInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GitlabProjectsForbiddenBody gitlab projects forbidden body
swagger:model GitlabProjectsForbiddenBody
*/
type GitlabProjectsForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this gitlab projects forbidden body
func (o *GitlabProjectsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gitlab projects forbidden body based on context it is used
func (o *GitlabProjectsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GitlabProjectsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GitlabProjectsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GitlabProjectsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GitlabProjectsInternalServerErrorBody gitlab projects internal server error body
swagger:model GitlabProjectsInternalServerErrorBody
*/
type GitlabProjectsInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this gitlab projects internal server error body
func (o *GitlabProjectsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gitlab projects internal server error body based on context it is used
func (o *GitlabProjectsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GitlabProjectsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GitlabProjectsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GitlabProjectsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
