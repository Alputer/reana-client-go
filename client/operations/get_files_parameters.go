// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFilesParams creates a new GetFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFilesParams() *GetFilesParams {
	return &GetFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFilesParamsWithTimeout creates a new GetFilesParams object
// with the ability to set a timeout on a request.
func NewGetFilesParamsWithTimeout(timeout time.Duration) *GetFilesParams {
	return &GetFilesParams{
		timeout: timeout,
	}
}

// NewGetFilesParamsWithContext creates a new GetFilesParams object
// with the ability to set a context for a request.
func NewGetFilesParamsWithContext(ctx context.Context) *GetFilesParams {
	return &GetFilesParams{
		Context: ctx,
	}
}

// NewGetFilesParamsWithHTTPClient creates a new GetFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFilesParamsWithHTTPClient(client *http.Client) *GetFilesParams {
	return &GetFilesParams{
		HTTPClient: client,
	}
}

/*
GetFilesParams contains all the parameters to send to the API endpoint

	for the get files operation.

	Typically these are written to a http.Request.
*/
type GetFilesParams struct {

	/* AccessToken.

	   The API access_token of workflow owner.
	*/
	AccessToken *string

	/* FileName.

	   File name(s) (glob) to list.
	*/
	FileName *string

	/* Page.

	   Results page number (pagination).
	*/
	Page *int64

	/* Search.

	   Filter workflow workspace files.
	*/
	Search *string

	/* Size.

	   Number of results per page (pagination).
	*/
	Size *int64

	/* WorkflowIDOrName.

	   Required. Analysis UUID or name.
	*/
	WorkflowIDOrName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFilesParams) WithDefaults() *GetFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get files params
func (o *GetFilesParams) WithTimeout(timeout time.Duration) *GetFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get files params
func (o *GetFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get files params
func (o *GetFilesParams) WithContext(ctx context.Context) *GetFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get files params
func (o *GetFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get files params
func (o *GetFilesParams) WithHTTPClient(client *http.Client) *GetFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get files params
func (o *GetFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessToken adds the accessToken to the get files params
func (o *GetFilesParams) WithAccessToken(accessToken *string) *GetFilesParams {
	o.SetAccessToken(accessToken)
	return o
}

// SetAccessToken adds the accessToken to the get files params
func (o *GetFilesParams) SetAccessToken(accessToken *string) {
	o.AccessToken = accessToken
}

// WithFileName adds the fileName to the get files params
func (o *GetFilesParams) WithFileName(fileName *string) *GetFilesParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the get files params
func (o *GetFilesParams) SetFileName(fileName *string) {
	o.FileName = fileName
}

// WithPage adds the page to the get files params
func (o *GetFilesParams) WithPage(page *int64) *GetFilesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get files params
func (o *GetFilesParams) SetPage(page *int64) {
	o.Page = page
}

// WithSearch adds the search to the get files params
func (o *GetFilesParams) WithSearch(search *string) *GetFilesParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get files params
func (o *GetFilesParams) SetSearch(search *string) {
	o.Search = search
}

// WithSize adds the size to the get files params
func (o *GetFilesParams) WithSize(size *int64) *GetFilesParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get files params
func (o *GetFilesParams) SetSize(size *int64) {
	o.Size = size
}

// WithWorkflowIDOrName adds the workflowIDOrName to the get files params
func (o *GetFilesParams) WithWorkflowIDOrName(workflowIDOrName string) *GetFilesParams {
	o.SetWorkflowIDOrName(workflowIDOrName)
	return o
}

// SetWorkflowIDOrName adds the workflowIdOrName to the get files params
func (o *GetFilesParams) SetWorkflowIDOrName(workflowIDOrName string) {
	o.WorkflowIDOrName = workflowIDOrName
}

// WriteToRequest writes these params to a swagger request
func (o *GetFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessToken != nil {

		// query param access_token
		var qrAccessToken string

		if o.AccessToken != nil {
			qrAccessToken = *o.AccessToken
		}
		qAccessToken := qrAccessToken
		if qAccessToken != "" {

			if err := r.SetQueryParam("access_token", qAccessToken); err != nil {
				return err
			}
		}
	}

	if o.FileName != nil {

		// query param file_name
		var qrFileName string

		if o.FileName != nil {
			qrFileName = *o.FileName
		}
		qFileName := qrFileName
		if qFileName != "" {

			if err := r.SetQueryParam("file_name", qFileName); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int64

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	// path param workflow_id_or_name
	if err := r.SetPathParam("workflow_id_or_name", o.WorkflowIDOrName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
