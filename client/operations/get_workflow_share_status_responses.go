// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetWorkflowShareStatusReader is a Reader for the GetWorkflowShareStatus structure.
type GetWorkflowShareStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowShareStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowShareStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetWorkflowShareStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWorkflowShareStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkflowShareStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWorkflowShareStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/workflows/{workflow_id_or_name}/share-status] get_workflow_share_status", response, response.Code())
	}
}

// NewGetWorkflowShareStatusOK creates a GetWorkflowShareStatusOK with default headers values
func NewGetWorkflowShareStatusOK() *GetWorkflowShareStatusOK {
	return &GetWorkflowShareStatusOK{}
}

/*
GetWorkflowShareStatusOK describes a response with status code 200, with default header values.

Request succeeded. The response contains the share status of the workflow.
*/
type GetWorkflowShareStatusOK struct {
	Payload *GetWorkflowShareStatusOKBody
}

// IsSuccess returns true when this get workflow share status o k response has a 2xx status code
func (o *GetWorkflowShareStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workflow share status o k response has a 3xx status code
func (o *GetWorkflowShareStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow share status o k response has a 4xx status code
func (o *GetWorkflowShareStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflow share status o k response has a 5xx status code
func (o *GetWorkflowShareStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow share status o k response a status code equal to that given
func (o *GetWorkflowShareStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workflow share status o k response
func (o *GetWorkflowShareStatusOK) Code() int {
	return 200
}

func (o *GetWorkflowShareStatusOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/share-status][%d] getWorkflowShareStatusOK %s", 200, payload)
}

func (o *GetWorkflowShareStatusOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/share-status][%d] getWorkflowShareStatusOK %s", 200, payload)
}

func (o *GetWorkflowShareStatusOK) GetPayload() *GetWorkflowShareStatusOKBody {
	return o.Payload
}

func (o *GetWorkflowShareStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowShareStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowShareStatusUnauthorized creates a GetWorkflowShareStatusUnauthorized with default headers values
func NewGetWorkflowShareStatusUnauthorized() *GetWorkflowShareStatusUnauthorized {
	return &GetWorkflowShareStatusUnauthorized{}
}

/*
GetWorkflowShareStatusUnauthorized describes a response with status code 401, with default header values.

Request failed. User not signed in.
*/
type GetWorkflowShareStatusUnauthorized struct {
	Payload *GetWorkflowShareStatusUnauthorizedBody
}

// IsSuccess returns true when this get workflow share status unauthorized response has a 2xx status code
func (o *GetWorkflowShareStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow share status unauthorized response has a 3xx status code
func (o *GetWorkflowShareStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow share status unauthorized response has a 4xx status code
func (o *GetWorkflowShareStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow share status unauthorized response has a 5xx status code
func (o *GetWorkflowShareStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow share status unauthorized response a status code equal to that given
func (o *GetWorkflowShareStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get workflow share status unauthorized response
func (o *GetWorkflowShareStatusUnauthorized) Code() int {
	return 401
}

func (o *GetWorkflowShareStatusUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/share-status][%d] getWorkflowShareStatusUnauthorized %s", 401, payload)
}

func (o *GetWorkflowShareStatusUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/share-status][%d] getWorkflowShareStatusUnauthorized %s", 401, payload)
}

func (o *GetWorkflowShareStatusUnauthorized) GetPayload() *GetWorkflowShareStatusUnauthorizedBody {
	return o.Payload
}

func (o *GetWorkflowShareStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowShareStatusUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowShareStatusForbidden creates a GetWorkflowShareStatusForbidden with default headers values
func NewGetWorkflowShareStatusForbidden() *GetWorkflowShareStatusForbidden {
	return &GetWorkflowShareStatusForbidden{}
}

/*
GetWorkflowShareStatusForbidden describes a response with status code 403, with default header values.

Request failed. Credentials are invalid or revoked.
*/
type GetWorkflowShareStatusForbidden struct {
	Payload *GetWorkflowShareStatusForbiddenBody
}

// IsSuccess returns true when this get workflow share status forbidden response has a 2xx status code
func (o *GetWorkflowShareStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow share status forbidden response has a 3xx status code
func (o *GetWorkflowShareStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow share status forbidden response has a 4xx status code
func (o *GetWorkflowShareStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow share status forbidden response has a 5xx status code
func (o *GetWorkflowShareStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow share status forbidden response a status code equal to that given
func (o *GetWorkflowShareStatusForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get workflow share status forbidden response
func (o *GetWorkflowShareStatusForbidden) Code() int {
	return 403
}

func (o *GetWorkflowShareStatusForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/share-status][%d] getWorkflowShareStatusForbidden %s", 403, payload)
}

func (o *GetWorkflowShareStatusForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/share-status][%d] getWorkflowShareStatusForbidden %s", 403, payload)
}

func (o *GetWorkflowShareStatusForbidden) GetPayload() *GetWorkflowShareStatusForbiddenBody {
	return o.Payload
}

func (o *GetWorkflowShareStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowShareStatusForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowShareStatusNotFound creates a GetWorkflowShareStatusNotFound with default headers values
func NewGetWorkflowShareStatusNotFound() *GetWorkflowShareStatusNotFound {
	return &GetWorkflowShareStatusNotFound{}
}

/*
GetWorkflowShareStatusNotFound describes a response with status code 404, with default header values.

Request failed. Workflow does not exist.
*/
type GetWorkflowShareStatusNotFound struct {
	Payload *GetWorkflowShareStatusNotFoundBody
}

// IsSuccess returns true when this get workflow share status not found response has a 2xx status code
func (o *GetWorkflowShareStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow share status not found response has a 3xx status code
func (o *GetWorkflowShareStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow share status not found response has a 4xx status code
func (o *GetWorkflowShareStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow share status not found response has a 5xx status code
func (o *GetWorkflowShareStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow share status not found response a status code equal to that given
func (o *GetWorkflowShareStatusNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workflow share status not found response
func (o *GetWorkflowShareStatusNotFound) Code() int {
	return 404
}

func (o *GetWorkflowShareStatusNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/share-status][%d] getWorkflowShareStatusNotFound %s", 404, payload)
}

func (o *GetWorkflowShareStatusNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/share-status][%d] getWorkflowShareStatusNotFound %s", 404, payload)
}

func (o *GetWorkflowShareStatusNotFound) GetPayload() *GetWorkflowShareStatusNotFoundBody {
	return o.Payload
}

func (o *GetWorkflowShareStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowShareStatusNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowShareStatusInternalServerError creates a GetWorkflowShareStatusInternalServerError with default headers values
func NewGetWorkflowShareStatusInternalServerError() *GetWorkflowShareStatusInternalServerError {
	return &GetWorkflowShareStatusInternalServerError{}
}

/*
GetWorkflowShareStatusInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal server error.
*/
type GetWorkflowShareStatusInternalServerError struct {
	Payload *GetWorkflowShareStatusInternalServerErrorBody
}

// IsSuccess returns true when this get workflow share status internal server error response has a 2xx status code
func (o *GetWorkflowShareStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow share status internal server error response has a 3xx status code
func (o *GetWorkflowShareStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow share status internal server error response has a 4xx status code
func (o *GetWorkflowShareStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflow share status internal server error response has a 5xx status code
func (o *GetWorkflowShareStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get workflow share status internal server error response a status code equal to that given
func (o *GetWorkflowShareStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get workflow share status internal server error response
func (o *GetWorkflowShareStatusInternalServerError) Code() int {
	return 500
}

func (o *GetWorkflowShareStatusInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/share-status][%d] getWorkflowShareStatusInternalServerError %s", 500, payload)
}

func (o *GetWorkflowShareStatusInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/share-status][%d] getWorkflowShareStatusInternalServerError %s", 500, payload)
}

func (o *GetWorkflowShareStatusInternalServerError) GetPayload() *GetWorkflowShareStatusInternalServerErrorBody {
	return o.Payload
}

func (o *GetWorkflowShareStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowShareStatusInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetWorkflowShareStatusForbiddenBody get workflow share status forbidden body
swagger:model GetWorkflowShareStatusForbiddenBody
*/
type GetWorkflowShareStatusForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get workflow share status forbidden body
func (o *GetWorkflowShareStatusForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow share status forbidden body based on context it is used
func (o *GetWorkflowShareStatusForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowShareStatusForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowShareStatusForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowShareStatusForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowShareStatusInternalServerErrorBody get workflow share status internal server error body
swagger:model GetWorkflowShareStatusInternalServerErrorBody
*/
type GetWorkflowShareStatusInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get workflow share status internal server error body
func (o *GetWorkflowShareStatusInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow share status internal server error body based on context it is used
func (o *GetWorkflowShareStatusInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowShareStatusInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowShareStatusInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowShareStatusInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowShareStatusNotFoundBody get workflow share status not found body
swagger:model GetWorkflowShareStatusNotFoundBody
*/
type GetWorkflowShareStatusNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get workflow share status not found body
func (o *GetWorkflowShareStatusNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow share status not found body based on context it is used
func (o *GetWorkflowShareStatusNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowShareStatusNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowShareStatusNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowShareStatusNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowShareStatusOKBody get workflow share status o k body
swagger:model GetWorkflowShareStatusOKBody
*/
type GetWorkflowShareStatusOKBody struct {

	// shared with
	SharedWith []*GetWorkflowShareStatusOKBodySharedWithItems0 `json:"shared_with"`

	// workflow id
	WorkflowID string `json:"workflow_id,omitempty"`

	// workflow name
	WorkflowName string `json:"workflow_name,omitempty"`
}

// Validate validates this get workflow share status o k body
func (o *GetWorkflowShareStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSharedWith(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWorkflowShareStatusOKBody) validateSharedWith(formats strfmt.Registry) error {
	if swag.IsZero(o.SharedWith) { // not required
		return nil
	}

	for i := 0; i < len(o.SharedWith); i++ {
		if swag.IsZero(o.SharedWith[i]) { // not required
			continue
		}

		if o.SharedWith[i] != nil {
			if err := o.SharedWith[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getWorkflowShareStatusOK" + "." + "shared_with" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getWorkflowShareStatusOK" + "." + "shared_with" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get workflow share status o k body based on the context it is used
func (o *GetWorkflowShareStatusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSharedWith(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWorkflowShareStatusOKBody) contextValidateSharedWith(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SharedWith); i++ {

		if o.SharedWith[i] != nil {

			if swag.IsZero(o.SharedWith[i]) { // not required
				return nil
			}

			if err := o.SharedWith[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getWorkflowShareStatusOK" + "." + "shared_with" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getWorkflowShareStatusOK" + "." + "shared_with" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowShareStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowShareStatusOKBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowShareStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowShareStatusOKBodySharedWithItems0 get workflow share status o k body shared with items0
swagger:model GetWorkflowShareStatusOKBodySharedWithItems0
*/
type GetWorkflowShareStatusOKBodySharedWithItems0 struct {

	// user email
	UserEmail string `json:"user_email,omitempty"`

	// valid until
	ValidUntil *string `json:"valid_until,omitempty"`
}

// Validate validates this get workflow share status o k body shared with items0
func (o *GetWorkflowShareStatusOKBodySharedWithItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow share status o k body shared with items0 based on context it is used
func (o *GetWorkflowShareStatusOKBodySharedWithItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowShareStatusOKBodySharedWithItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowShareStatusOKBodySharedWithItems0) UnmarshalBinary(b []byte) error {
	var res GetWorkflowShareStatusOKBodySharedWithItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowShareStatusUnauthorizedBody get workflow share status unauthorized body
swagger:model GetWorkflowShareStatusUnauthorizedBody
*/
type GetWorkflowShareStatusUnauthorizedBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get workflow share status unauthorized body
func (o *GetWorkflowShareStatusUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow share status unauthorized body based on context it is used
func (o *GetWorkflowShareStatusUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowShareStatusUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowShareStatusUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowShareStatusUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
