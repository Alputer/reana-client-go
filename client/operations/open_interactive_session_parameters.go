// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewOpenInteractiveSessionParams creates a new OpenInteractiveSessionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewOpenInteractiveSessionParams() *OpenInteractiveSessionParams {
	return &OpenInteractiveSessionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewOpenInteractiveSessionParamsWithTimeout creates a new OpenInteractiveSessionParams object
// with the ability to set a timeout on a request.
func NewOpenInteractiveSessionParamsWithTimeout(timeout time.Duration) *OpenInteractiveSessionParams {
	return &OpenInteractiveSessionParams{
		timeout: timeout,
	}
}

// NewOpenInteractiveSessionParamsWithContext creates a new OpenInteractiveSessionParams object
// with the ability to set a context for a request.
func NewOpenInteractiveSessionParamsWithContext(ctx context.Context) *OpenInteractiveSessionParams {
	return &OpenInteractiveSessionParams{
		Context: ctx,
	}
}

// NewOpenInteractiveSessionParamsWithHTTPClient creates a new OpenInteractiveSessionParams object
// with the ability to set a custom HTTPClient for a request.
func NewOpenInteractiveSessionParamsWithHTTPClient(client *http.Client) *OpenInteractiveSessionParams {
	return &OpenInteractiveSessionParams{
		HTTPClient: client,
	}
}

/*
OpenInteractiveSessionParams contains all the parameters to send to the API endpoint

	for the open interactive session operation.

	Typically these are written to a http.Request.
*/
type OpenInteractiveSessionParams struct {

	/* AccessToken.

	   The API access_token of workflow owner.
	*/
	AccessToken *string

	/* InteractiveSessionConfiguration.

	   Interactive session configuration.
	*/
	InteractiveSessionConfiguration OpenInteractiveSessionBody

	/* InteractiveSessionType.

	   Type of interactive session to use.
	*/
	InteractiveSessionType string

	/* WorkflowIDOrName.

	   Required. Workflow UUID or name.
	*/
	WorkflowIDOrName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the open interactive session params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OpenInteractiveSessionParams) WithDefaults() *OpenInteractiveSessionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the open interactive session params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OpenInteractiveSessionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the open interactive session params
func (o *OpenInteractiveSessionParams) WithTimeout(timeout time.Duration) *OpenInteractiveSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the open interactive session params
func (o *OpenInteractiveSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the open interactive session params
func (o *OpenInteractiveSessionParams) WithContext(ctx context.Context) *OpenInteractiveSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the open interactive session params
func (o *OpenInteractiveSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the open interactive session params
func (o *OpenInteractiveSessionParams) WithHTTPClient(client *http.Client) *OpenInteractiveSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the open interactive session params
func (o *OpenInteractiveSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessToken adds the accessToken to the open interactive session params
func (o *OpenInteractiveSessionParams) WithAccessToken(accessToken *string) *OpenInteractiveSessionParams {
	o.SetAccessToken(accessToken)
	return o
}

// SetAccessToken adds the accessToken to the open interactive session params
func (o *OpenInteractiveSessionParams) SetAccessToken(accessToken *string) {
	o.AccessToken = accessToken
}

// WithInteractiveSessionConfiguration adds the interactiveSessionConfiguration to the open interactive session params
func (o *OpenInteractiveSessionParams) WithInteractiveSessionConfiguration(interactiveSessionConfiguration OpenInteractiveSessionBody) *OpenInteractiveSessionParams {
	o.SetInteractiveSessionConfiguration(interactiveSessionConfiguration)
	return o
}

// SetInteractiveSessionConfiguration adds the interactiveSessionConfiguration to the open interactive session params
func (o *OpenInteractiveSessionParams) SetInteractiveSessionConfiguration(interactiveSessionConfiguration OpenInteractiveSessionBody) {
	o.InteractiveSessionConfiguration = interactiveSessionConfiguration
}

// WithInteractiveSessionType adds the interactiveSessionType to the open interactive session params
func (o *OpenInteractiveSessionParams) WithInteractiveSessionType(interactiveSessionType string) *OpenInteractiveSessionParams {
	o.SetInteractiveSessionType(interactiveSessionType)
	return o
}

// SetInteractiveSessionType adds the interactiveSessionType to the open interactive session params
func (o *OpenInteractiveSessionParams) SetInteractiveSessionType(interactiveSessionType string) {
	o.InteractiveSessionType = interactiveSessionType
}

// WithWorkflowIDOrName adds the workflowIDOrName to the open interactive session params
func (o *OpenInteractiveSessionParams) WithWorkflowIDOrName(workflowIDOrName string) *OpenInteractiveSessionParams {
	o.SetWorkflowIDOrName(workflowIDOrName)
	return o
}

// SetWorkflowIDOrName adds the workflowIdOrName to the open interactive session params
func (o *OpenInteractiveSessionParams) SetWorkflowIDOrName(workflowIDOrName string) {
	o.WorkflowIDOrName = workflowIDOrName
}

// WriteToRequest writes these params to a swagger request
func (o *OpenInteractiveSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessToken != nil {

		// query param access_token
		var qrAccessToken string

		if o.AccessToken != nil {
			qrAccessToken = *o.AccessToken
		}
		qAccessToken := qrAccessToken
		if qAccessToken != "" {

			if err := r.SetQueryParam("access_token", qAccessToken); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.InteractiveSessionConfiguration); err != nil {
		return err
	}

	// path param interactive_session_type
	if err := r.SetPathParam("interactive_session_type", o.InteractiveSessionType); err != nil {
		return err
	}

	// path param workflow_id_or_name
	if err := r.SetPathParam("workflow_id_or_name", o.WorkflowIDOrName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
