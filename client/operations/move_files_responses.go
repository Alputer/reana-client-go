// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MoveFilesReader is a Reader for the MoveFiles structure.
type MoveFilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MoveFilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMoveFilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMoveFilesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMoveFilesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMoveFilesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMoveFilesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMoveFilesOK creates a MoveFilesOK with default headers values
func NewMoveFilesOK() *MoveFilesOK {
	return &MoveFilesOK{}
}

/* MoveFilesOK describes a response with status code 200, with default header values.

Request succeeded. Message about successfully moved files is returned.
*/
type MoveFilesOK struct {
	Payload *MoveFilesOKBody
}

func (o *MoveFilesOK) Error() string {
	return fmt.Sprintf("[PUT /api/workflows/move_files/{workflow_id_or_name}][%d] moveFilesOK  %+v", 200, o.Payload)
}
func (o *MoveFilesOK) GetPayload() *MoveFilesOKBody {
	return o.Payload
}

func (o *MoveFilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MoveFilesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveFilesBadRequest creates a MoveFilesBadRequest with default headers values
func NewMoveFilesBadRequest() *MoveFilesBadRequest {
	return &MoveFilesBadRequest{}
}

/* MoveFilesBadRequest describes a response with status code 400, with default header values.

Request failed. The incoming payload seems malformed.
*/
type MoveFilesBadRequest struct {
}

func (o *MoveFilesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/workflows/move_files/{workflow_id_or_name}][%d] moveFilesBadRequest ", 400)
}

func (o *MoveFilesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMoveFilesForbidden creates a MoveFilesForbidden with default headers values
func NewMoveFilesForbidden() *MoveFilesForbidden {
	return &MoveFilesForbidden{}
}

/* MoveFilesForbidden describes a response with status code 403, with default header values.

Request failed. User is not allowed to access workflow.
*/
type MoveFilesForbidden struct {
}

func (o *MoveFilesForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/workflows/move_files/{workflow_id_or_name}][%d] moveFilesForbidden ", 403)
}

func (o *MoveFilesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMoveFilesNotFound creates a MoveFilesNotFound with default headers values
func NewMoveFilesNotFound() *MoveFilesNotFound {
	return &MoveFilesNotFound{}
}

/* MoveFilesNotFound describes a response with status code 404, with default header values.

Request failed. Either User or Workflow does not exist.
*/
type MoveFilesNotFound struct {
}

func (o *MoveFilesNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/workflows/move_files/{workflow_id_or_name}][%d] moveFilesNotFound ", 404)
}

func (o *MoveFilesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMoveFilesInternalServerError creates a MoveFilesInternalServerError with default headers values
func NewMoveFilesInternalServerError() *MoveFilesInternalServerError {
	return &MoveFilesInternalServerError{}
}

/* MoveFilesInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal controller error.
*/
type MoveFilesInternalServerError struct {
}

func (o *MoveFilesInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/workflows/move_files/{workflow_id_or_name}][%d] moveFilesInternalServerError ", 500)
}

func (o *MoveFilesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*MoveFilesOKBody move files o k body
swagger:model MoveFilesOKBody
*/
type MoveFilesOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// workflow id
	WorkflowID string `json:"workflow_id,omitempty"`

	// workflow name
	WorkflowName string `json:"workflow_name,omitempty"`
}

// Validate validates this move files o k body
func (o *MoveFilesOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this move files o k body based on context it is used
func (o *MoveFilesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveFilesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveFilesOKBody) UnmarshalBinary(b []byte) error {
	var res MoveFilesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
