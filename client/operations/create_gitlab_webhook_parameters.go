// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateGitlabWebhookParams creates a new CreateGitlabWebhookParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateGitlabWebhookParams() *CreateGitlabWebhookParams {
	return &CreateGitlabWebhookParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateGitlabWebhookParamsWithTimeout creates a new CreateGitlabWebhookParams object
// with the ability to set a timeout on a request.
func NewCreateGitlabWebhookParamsWithTimeout(timeout time.Duration) *CreateGitlabWebhookParams {
	return &CreateGitlabWebhookParams{
		timeout: timeout,
	}
}

// NewCreateGitlabWebhookParamsWithContext creates a new CreateGitlabWebhookParams object
// with the ability to set a context for a request.
func NewCreateGitlabWebhookParamsWithContext(ctx context.Context) *CreateGitlabWebhookParams {
	return &CreateGitlabWebhookParams{
		Context: ctx,
	}
}

// NewCreateGitlabWebhookParamsWithHTTPClient creates a new CreateGitlabWebhookParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateGitlabWebhookParamsWithHTTPClient(client *http.Client) *CreateGitlabWebhookParams {
	return &CreateGitlabWebhookParams{
		HTTPClient: client,
	}
}

/* CreateGitlabWebhookParams contains all the parameters to send to the API endpoint
   for the create gitlab webhook operation.

   Typically these are written to a http.Request.
*/
type CreateGitlabWebhookParams struct {

	/* ProjectID.

	   The GitLab project id.
	*/
	ProjectID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create gitlab webhook params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateGitlabWebhookParams) WithDefaults() *CreateGitlabWebhookParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create gitlab webhook params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateGitlabWebhookParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create gitlab webhook params
func (o *CreateGitlabWebhookParams) WithTimeout(timeout time.Duration) *CreateGitlabWebhookParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create gitlab webhook params
func (o *CreateGitlabWebhookParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create gitlab webhook params
func (o *CreateGitlabWebhookParams) WithContext(ctx context.Context) *CreateGitlabWebhookParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create gitlab webhook params
func (o *CreateGitlabWebhookParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create gitlab webhook params
func (o *CreateGitlabWebhookParams) WithHTTPClient(client *http.Client) *CreateGitlabWebhookParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create gitlab webhook params
func (o *CreateGitlabWebhookParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProjectID adds the projectID to the create gitlab webhook params
func (o *CreateGitlabWebhookParams) WithProjectID(projectID int64) *CreateGitlabWebhookParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the create gitlab webhook params
func (o *CreateGitlabWebhookParams) SetProjectID(projectID int64) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateGitlabWebhookParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param project_id
	qrProjectID := o.ProjectID
	qProjectID := swag.FormatInt64(qrProjectID)
	if qProjectID != "" {

		if err := r.SetQueryParam("project_id", qProjectID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
