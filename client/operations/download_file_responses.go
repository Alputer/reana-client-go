// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DownloadFileReader is a Reader for the DownloadFile structure.
type DownloadFileReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *DownloadFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadFileOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}] download_file", response, response.Code())
	}
}

// NewDownloadFileOK creates a DownloadFileOK with default headers values
func NewDownloadFileOK(writer io.Writer) *DownloadFileOK {
	return &DownloadFileOK{

		Payload: writer,
	}
}

/*
DownloadFileOK describes a response with status code 200, with default header values.

Requests succeeded. The file has been downloaded.
*/
type DownloadFileOK struct {
	ContentDisposition string
	ContentType        string

	Payload io.Writer
}

// IsSuccess returns true when this download file o k response has a 2xx status code
func (o *DownloadFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download file o k response has a 3xx status code
func (o *DownloadFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file o k response has a 4xx status code
func (o *DownloadFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download file o k response has a 5xx status code
func (o *DownloadFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download file o k response a status code equal to that given
func (o *DownloadFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download file o k response
func (o *DownloadFileOK) Code() int {
	return 200
}

func (o *DownloadFileOK) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] downloadFileOK  %+v", 200, o.Payload)
}

func (o *DownloadFileOK) String() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] downloadFileOK  %+v", 200, o.Payload)
}

func (o *DownloadFileOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *DownloadFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Disposition
	hdrContentDisposition := response.GetHeader("Content-Disposition")

	if hdrContentDisposition != "" {
		o.ContentDisposition = hdrContentDisposition
	}

	// hydrates response header Content-Type
	hdrContentType := response.GetHeader("Content-Type")

	if hdrContentType != "" {
		o.ContentType = hdrContentType
	}

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFileBadRequest creates a DownloadFileBadRequest with default headers values
func NewDownloadFileBadRequest() *DownloadFileBadRequest {
	return &DownloadFileBadRequest{}
}

/*
DownloadFileBadRequest describes a response with status code 400, with default header values.

Request failed. The incoming payload seems malformed.
*/
type DownloadFileBadRequest struct {
}

// IsSuccess returns true when this download file bad request response has a 2xx status code
func (o *DownloadFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download file bad request response has a 3xx status code
func (o *DownloadFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file bad request response has a 4xx status code
func (o *DownloadFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this download file bad request response has a 5xx status code
func (o *DownloadFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this download file bad request response a status code equal to that given
func (o *DownloadFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the download file bad request response
func (o *DownloadFileBadRequest) Code() int {
	return 400
}

func (o *DownloadFileBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] downloadFileBadRequest ", 400)
}

func (o *DownloadFileBadRequest) String() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] downloadFileBadRequest ", 400)
}

func (o *DownloadFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadFileForbidden creates a DownloadFileForbidden with default headers values
func NewDownloadFileForbidden() *DownloadFileForbidden {
	return &DownloadFileForbidden{}
}

/*
DownloadFileForbidden describes a response with status code 403, with default header values.

Request failed. User is not allowed to access workflow.
*/
type DownloadFileForbidden struct {
	Payload *DownloadFileForbiddenBody
}

// IsSuccess returns true when this download file forbidden response has a 2xx status code
func (o *DownloadFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download file forbidden response has a 3xx status code
func (o *DownloadFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file forbidden response has a 4xx status code
func (o *DownloadFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download file forbidden response has a 5xx status code
func (o *DownloadFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download file forbidden response a status code equal to that given
func (o *DownloadFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the download file forbidden response
func (o *DownloadFileForbidden) Code() int {
	return 403
}

func (o *DownloadFileForbidden) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] downloadFileForbidden  %+v", 403, o.Payload)
}

func (o *DownloadFileForbidden) String() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] downloadFileForbidden  %+v", 403, o.Payload)
}

func (o *DownloadFileForbidden) GetPayload() *DownloadFileForbiddenBody {
	return o.Payload
}

func (o *DownloadFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DownloadFileForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFileNotFound creates a DownloadFileNotFound with default headers values
func NewDownloadFileNotFound() *DownloadFileNotFound {
	return &DownloadFileNotFound{}
}

/*
DownloadFileNotFound describes a response with status code 404, with default header values.

Request failed. `file_name` does not exist .
*/
type DownloadFileNotFound struct {
	Payload *DownloadFileNotFoundBody
}

// IsSuccess returns true when this download file not found response has a 2xx status code
func (o *DownloadFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download file not found response has a 3xx status code
func (o *DownloadFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file not found response has a 4xx status code
func (o *DownloadFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download file not found response has a 5xx status code
func (o *DownloadFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download file not found response a status code equal to that given
func (o *DownloadFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download file not found response
func (o *DownloadFileNotFound) Code() int {
	return 404
}

func (o *DownloadFileNotFound) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] downloadFileNotFound  %+v", 404, o.Payload)
}

func (o *DownloadFileNotFound) String() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] downloadFileNotFound  %+v", 404, o.Payload)
}

func (o *DownloadFileNotFound) GetPayload() *DownloadFileNotFoundBody {
	return o.Payload
}

func (o *DownloadFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DownloadFileNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFileInternalServerError creates a DownloadFileInternalServerError with default headers values
func NewDownloadFileInternalServerError() *DownloadFileInternalServerError {
	return &DownloadFileInternalServerError{}
}

/*
DownloadFileInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal server error.
*/
type DownloadFileInternalServerError struct {
	Payload *DownloadFileInternalServerErrorBody
}

// IsSuccess returns true when this download file internal server error response has a 2xx status code
func (o *DownloadFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download file internal server error response has a 3xx status code
func (o *DownloadFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file internal server error response has a 4xx status code
func (o *DownloadFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this download file internal server error response has a 5xx status code
func (o *DownloadFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this download file internal server error response a status code equal to that given
func (o *DownloadFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the download file internal server error response
func (o *DownloadFileInternalServerError) Code() int {
	return 500
}

func (o *DownloadFileInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] downloadFileInternalServerError  %+v", 500, o.Payload)
}

func (o *DownloadFileInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] downloadFileInternalServerError  %+v", 500, o.Payload)
}

func (o *DownloadFileInternalServerError) GetPayload() *DownloadFileInternalServerErrorBody {
	return o.Payload
}

func (o *DownloadFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DownloadFileInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DownloadFileForbiddenBody download file forbidden body
swagger:model DownloadFileForbiddenBody
*/
type DownloadFileForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this download file forbidden body
func (o *DownloadFileForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this download file forbidden body based on context it is used
func (o *DownloadFileForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DownloadFileForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DownloadFileForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DownloadFileForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DownloadFileInternalServerErrorBody download file internal server error body
swagger:model DownloadFileInternalServerErrorBody
*/
type DownloadFileInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this download file internal server error body
func (o *DownloadFileInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this download file internal server error body based on context it is used
func (o *DownloadFileInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DownloadFileInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DownloadFileInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DownloadFileInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DownloadFileNotFoundBody download file not found body
swagger:model DownloadFileNotFoundBody
*/
type DownloadFileNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this download file not found body
func (o *DownloadFileNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this download file not found body based on context it is used
func (o *DownloadFileNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DownloadFileNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DownloadFileNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DownloadFileNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
