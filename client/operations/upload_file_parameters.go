// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUploadFileParams creates a new UploadFileParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadFileParams() *UploadFileParams {
	return &UploadFileParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadFileParamsWithTimeout creates a new UploadFileParams object
// with the ability to set a timeout on a request.
func NewUploadFileParamsWithTimeout(timeout time.Duration) *UploadFileParams {
	return &UploadFileParams{
		timeout: timeout,
	}
}

// NewUploadFileParamsWithContext creates a new UploadFileParams object
// with the ability to set a context for a request.
func NewUploadFileParamsWithContext(ctx context.Context) *UploadFileParams {
	return &UploadFileParams{
		Context: ctx,
	}
}

// NewUploadFileParamsWithHTTPClient creates a new UploadFileParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadFileParamsWithHTTPClient(client *http.Client) *UploadFileParams {
	return &UploadFileParams{
		HTTPClient: client,
	}
}

/* UploadFileParams contains all the parameters to send to the API endpoint
   for the upload file operation.

   Typically these are written to a http.Request.
*/
type UploadFileParams struct {

	/* AccessToken.

	   The API access_token of workflow owner.
	*/
	AccessToken *string

	/* File.

	   Required. File to add to the workspace.
	*/
	File string

	/* FileName.

	   Required. File name.
	*/
	FileName string

	/* Preview.

	   Optional flag to return a previewable response of the file (corresponding mime-type).
	*/
	Preview *bool

	/* WorkflowIDOrName.

	   Required. Analysis UUID or name.
	*/
	WorkflowIDOrName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFileParams) WithDefaults() *UploadFileParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFileParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the upload file params
func (o *UploadFileParams) WithTimeout(timeout time.Duration) *UploadFileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload file params
func (o *UploadFileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload file params
func (o *UploadFileParams) WithContext(ctx context.Context) *UploadFileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload file params
func (o *UploadFileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload file params
func (o *UploadFileParams) WithHTTPClient(client *http.Client) *UploadFileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload file params
func (o *UploadFileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessToken adds the accessToken to the upload file params
func (o *UploadFileParams) WithAccessToken(accessToken *string) *UploadFileParams {
	o.SetAccessToken(accessToken)
	return o
}

// SetAccessToken adds the accessToken to the upload file params
func (o *UploadFileParams) SetAccessToken(accessToken *string) {
	o.AccessToken = accessToken
}

// WithFile adds the file to the upload file params
func (o *UploadFileParams) WithFile(file string) *UploadFileParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the upload file params
func (o *UploadFileParams) SetFile(file string) {
	o.File = file
}

// WithFileName adds the fileName to the upload file params
func (o *UploadFileParams) WithFileName(fileName string) *UploadFileParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the upload file params
func (o *UploadFileParams) SetFileName(fileName string) {
	o.FileName = fileName
}

// WithPreview adds the preview to the upload file params
func (o *UploadFileParams) WithPreview(preview *bool) *UploadFileParams {
	o.SetPreview(preview)
	return o
}

// SetPreview adds the preview to the upload file params
func (o *UploadFileParams) SetPreview(preview *bool) {
	o.Preview = preview
}

// WithWorkflowIDOrName adds the workflowIDOrName to the upload file params
func (o *UploadFileParams) WithWorkflowIDOrName(workflowIDOrName string) *UploadFileParams {
	o.SetWorkflowIDOrName(workflowIDOrName)
	return o
}

// SetWorkflowIDOrName adds the workflowIdOrName to the upload file params
func (o *UploadFileParams) SetWorkflowIDOrName(workflowIDOrName string) {
	o.WorkflowIDOrName = workflowIDOrName
}

// WriteToRequest writes these params to a swagger request
func (o *UploadFileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessToken != nil {

		// query param access_token
		var qrAccessToken string

		if o.AccessToken != nil {
			qrAccessToken = *o.AccessToken
		}
		qAccessToken := qrAccessToken
		if qAccessToken != "" {

			if err := r.SetQueryParam("access_token", qAccessToken); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.File); err != nil {
		return err
	}

	// query param file_name
	qrFileName := o.FileName
	qFileName := qrFileName
	if qFileName != "" {

		if err := r.SetQueryParam("file_name", qFileName); err != nil {
			return err
		}
	}

	if o.Preview != nil {

		// query param preview
		var qrPreview bool

		if o.Preview != nil {
			qrPreview = *o.Preview
		}
		qPreview := swag.FormatBool(qrPreview)
		if qPreview != "" {

			if err := r.SetQueryParam("preview", qPreview); err != nil {
				return err
			}
		}
	}

	// path param workflow_id_or_name
	if err := r.SetPathParam("workflow_id_or_name", o.WorkflowIDOrName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
