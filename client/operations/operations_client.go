// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddSecrets(params *AddSecretsParams, opts ...ClientOption) (*AddSecretsCreated, error)

	CloseInteractiveSession(params *CloseInteractiveSessionParams, opts ...ClientOption) (*CloseInteractiveSessionOK, error)

	CreateGitlabWebhook(params *CreateGitlabWebhookParams, opts ...ClientOption) (*CreateGitlabWebhookCreated, error)

	CreateWorkflow(params *CreateWorkflowParams, opts ...ClientOption) (*CreateWorkflowCreated, error)

	DeleteFile(params *DeleteFileParams, opts ...ClientOption) (*DeleteFileOK, error)

	DeleteGitlabWebhook(params *DeleteGitlabWebhookParams, opts ...ClientOption) (*DeleteGitlabWebhookNoContent, error)

	DeleteSecrets(params *DeleteSecretsParams, opts ...ClientOption) (*DeleteSecretsOK, error)

	DownloadFile(params *DownloadFileParams, writer io.Writer, opts ...ClientOption) (*DownloadFileOK, error)

	GetConfig(params *GetConfigParams, opts ...ClientOption) (*GetConfigOK, error)

	GetFiles(params *GetFilesParams, opts ...ClientOption) (*GetFilesOK, error)

	GetSecrets(params *GetSecretsParams, opts ...ClientOption) (*GetSecretsOK, error)

	GetWorkflowDiff(params *GetWorkflowDiffParams, opts ...ClientOption) (*GetWorkflowDiffOK, error)

	GetWorkflowDiskUsage(params *GetWorkflowDiskUsageParams, opts ...ClientOption) (*GetWorkflowDiskUsageOK, error)

	GetWorkflowLogs(params *GetWorkflowLogsParams, opts ...ClientOption) (*GetWorkflowLogsOK, error)

	GetWorkflowParameters(params *GetWorkflowParametersParams, opts ...ClientOption) (*GetWorkflowParametersOK, error)

	GetWorkflowRetentionRules(params *GetWorkflowRetentionRulesParams, opts ...ClientOption) (*GetWorkflowRetentionRulesOK, error)

	GetWorkflowSpecification(params *GetWorkflowSpecificationParams, opts ...ClientOption) (*GetWorkflowSpecificationOK, error)

	GetWorkflowStatus(params *GetWorkflowStatusParams, opts ...ClientOption) (*GetWorkflowStatusOK, error)

	GetWorkflows(params *GetWorkflowsParams, opts ...ClientOption) (*GetWorkflowsOK, error)

	GetYou(params *GetYouParams, opts ...ClientOption) (*GetYouOK, error)

	GitlabConnect(params *GitlabConnectParams, opts ...ClientOption) error

	GitlabOauth(params *GitlabOauthParams, opts ...ClientOption) (*GitlabOauthOK, *GitlabOauthCreated, error)

	GitlabProjects(params *GitlabProjectsParams, opts ...ClientOption) (*GitlabProjectsOK, error)

	Info(params *InfoParams, opts ...ClientOption) (*InfoOK, error)

	Launch(params *LaunchParams, opts ...ClientOption) (*LaunchOK, error)

	MoveFiles(params *MoveFilesParams, opts ...ClientOption) (*MoveFilesOK, error)

	OpenInteractiveSession(params *OpenInteractiveSessionParams, opts ...ClientOption) (*OpenInteractiveSessionOK, error)

	Ping(params *PingParams, opts ...ClientOption) (*PingOK, error)

	RequestToken(params *RequestTokenParams, opts ...ClientOption) (*RequestTokenOK, error)

	SetWorkflowStatus(params *SetWorkflowStatusParams, opts ...ClientOption) (*SetWorkflowStatusOK, error)

	StartWorkflow(params *StartWorkflowParams, opts ...ClientOption) (*StartWorkflowOK, error)

	Status(params *StatusParams, opts ...ClientOption) (*StatusOK, error)

	UploadFile(params *UploadFileParams, opts ...ClientOption) (*UploadFileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddSecrets adds user secrets to r e a n a

  This resource adds secrets for the authenticated user.
*/
func (a *Client) AddSecrets(params *AddSecretsParams, opts ...ClientOption) (*AddSecretsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSecretsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "add_secrets",
		Method:             "POST",
		PathPattern:        "/api/secrets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSecretsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSecretsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for add_secrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloseInteractiveSession closes an interactive workflow session

  This resource is expecting a workflow to close an interactive session within its workspace.
*/
func (a *Client) CloseInteractiveSession(params *CloseInteractiveSessionParams, opts ...ClientOption) (*CloseInteractiveSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloseInteractiveSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "close_interactive_session",
		Method:             "POST",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/close/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloseInteractiveSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloseInteractiveSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for close_interactive_session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateGitlabWebhook sets a webhook on a user project from git lab

  Setup a webhook for a GitLab project on GitLab.
*/
func (a *Client) CreateGitlabWebhook(params *CreateGitlabWebhookParams, opts ...ClientOption) (*CreateGitlabWebhookCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGitlabWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_gitlab_webhook",
		Method:             "POST",
		PathPattern:        "/api/gitlab/webhook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGitlabWebhookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGitlabWebhookCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_gitlab_webhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateWorkflow creates a new workflow based on a r e a n a specification file

  This resource is expecting a REANA specification in JSON format with all the necessary information to instantiate a workflow.
*/
func (a *Client) CreateWorkflow(params *CreateWorkflowParams, opts ...ClientOption) (*CreateWorkflowCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_workflow",
		Method:             "POST",
		PathPattern:        "/api/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWorkflowCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_workflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFile deletes the specified file

  This resource is expecting a workflow UUID and a filename existing inside the workspace to be deleted.
*/
func (a *Client) DeleteFile(params *DeleteFileParams, opts ...ClientOption) (*DeleteFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_file",
		Method:             "DELETE",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/workspace/{file_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_file: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGitlabWebhook deletes an existing webhook from git lab

  Remove an existing REANA webhook from a project on GitLab
*/
func (a *Client) DeleteGitlabWebhook(params *DeleteGitlabWebhookParams, opts ...ClientOption) (*DeleteGitlabWebhookNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGitlabWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_gitlab_webhook",
		Method:             "DELETE",
		PathPattern:        "/api/gitlab/webhook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGitlabWebhookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGitlabWebhookNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_gitlab_webhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSecrets deletes the specified secret s

  This resource deletes the requested secrets.
*/
func (a *Client) DeleteSecrets(params *DeleteSecretsParams, opts ...ClientOption) (*DeleteSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecretsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_secrets",
		Method:             "DELETE",
		PathPattern:        "/api/secrets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSecretsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_secrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DownloadFile returns the requested file

  This resource is expecting a workflow UUID and a file name existing inside the workspace to return its content.
*/
func (a *Client) DownloadFile(params *DownloadFileParams, writer io.Writer, opts ...ClientOption) (*DownloadFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "download_file",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/workspace/{file_name}",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream", "application/zip", "image/*", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadFileReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for download_file: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConfig gets information about reana UI configuration user

  This resource provides configuration needed by Reana-UI.
*/
func (a *Client) GetConfig(params *GetConfigParams, opts ...ClientOption) (*GetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_config",
		Method:             "GET",
		PathPattern:        "/api/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFiles returns the workspace file list

  This resource retrieves the file list of a workspace, given its workflow UUID.
*/
func (a *Client) GetFiles(params *GetFilesParams, opts ...ClientOption) (*GetFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_files",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/workspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_files: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSecrets gets user secrets requires an user access token

  Get user secrets.
*/
func (a *Client) GetSecrets(params *GetSecretsParams, opts ...ClientOption) (*GetSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecretsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_secrets",
		Method:             "GET",
		PathPattern:        "/api/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecretsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_secrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowDiff gets diff between two workflows

  This resource shows the differences between the assets of two workflows. Resource is expecting two workflow UUIDs or names.
*/
func (a *Client) GetWorkflowDiff(params *GetWorkflowDiffParams, opts ...ClientOption) (*GetWorkflowDiffOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowDiffParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_workflow_diff",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_id_or_name_a}/diff/{workflow_id_or_name_b}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowDiffReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowDiffOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_workflow_diff: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowDiskUsage gets disk usage of a workflow

  This resource reports the disk usage of a workflow. Resource is expecting a workflow UUID and some parameters .
*/
func (a *Client) GetWorkflowDiskUsage(params *GetWorkflowDiskUsageParams, opts ...ClientOption) (*GetWorkflowDiskUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowDiskUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_workflow_disk_usage",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/disk_usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowDiskUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowDiskUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_workflow_disk_usage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowLogs gets workflow logs of a workflow

  This resource reports the status of a workflow. Resource is expecting a workflow UUID.
*/
func (a *Client) GetWorkflowLogs(params *GetWorkflowLogsParams, opts ...ClientOption) (*GetWorkflowLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_workflow_logs",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_workflow_logs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowParameters gets parameters of a workflow

  This resource reports the input parameters of a workflow. Resource is expecting a workflow UUID.
*/
func (a *Client) GetWorkflowParameters(params *GetWorkflowParametersParams, opts ...ClientOption) (*GetWorkflowParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_workflow_parameters",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_workflow_parameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowRetentionRules gets the retention rules of a workflow

  This resource returns all the retention rules of a given workflow.
*/
func (a *Client) GetWorkflowRetentionRules(params *GetWorkflowRetentionRulesParams, opts ...ClientOption) (*GetWorkflowRetentionRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowRetentionRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_workflow_retention_rules",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/retention_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowRetentionRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowRetentionRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_workflow_retention_rules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowSpecification gets the specification used for this workflow run

  This resource returns the REANA workflow specification used to start the workflow run. Resource is expecting a workflow UUID.
*/
func (a *Client) GetWorkflowSpecification(params *GetWorkflowSpecificationParams, opts ...ClientOption) (*GetWorkflowSpecificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowSpecificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_workflow_specification",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/specification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowSpecificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowSpecificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_workflow_specification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowStatus gets status of a workflow

  This resource reports the status of a workflow. Resource is expecting a workflow UUID.
*/
func (a *Client) GetWorkflowStatus(params *GetWorkflowStatusParams, opts ...ClientOption) (*GetWorkflowStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_workflow_status",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_workflow_status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflows returns list of all current workflows in r e a n a

  This resource return all current workflows in JSON format.
*/
func (a *Client) GetWorkflows(params *GetWorkflowsParams, opts ...ClientOption) (*GetWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_workflows",
		Method:             "GET",
		PathPattern:        "/api/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_workflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetYou gets information about authenticated user

  This resource provides basic information about an authenticated user based on the session cookie presence.
*/
func (a *Client) GetYou(params *GetYouParams, opts ...ClientOption) (*GetYouOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetYouParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_you",
		Method:             "GET",
		PathPattern:        "/api/you",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetYouReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetYouOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_you: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GitlabConnect initiates connection to git lab

  Initiate connection to GitLab to authorize accessing the authenticated user's API.
*/
func (a *Client) GitlabConnect(params *GitlabConnectParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitlabConnectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "gitlab_connect",
		Method:             "GET",
		PathPattern:        "/api/gitlab/connect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GitlabConnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GitlabOauth gets access token from git lab

  Authorize REANA on GitLab.
*/
func (a *Client) GitlabOauth(params *GitlabOauthParams, opts ...ClientOption) (*GitlabOauthOK, *GitlabOauthCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitlabOauthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "gitlab_oauth",
		Method:             "GET",
		PathPattern:        "/api/gitlab",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GitlabOauthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GitlabOauthOK:
		return value, nil, nil
	case *GitlabOauthCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GitlabProjects gets user project from git lab

  Retrieve projects from GitLab.
*/
func (a *Client) GitlabProjects(params *GitlabProjectsParams, opts ...ClientOption) (*GitlabProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitlabProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "gitlab_projects",
		Method:             "GET",
		PathPattern:        "/api/gitlab/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GitlabProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GitlabProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for gitlab_projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Info gets information about the cluster capabilities

  This resource reports information about cluster capabilities.
*/
func (a *Client) Info(params *InfoParams, opts ...ClientOption) (*InfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "info",
		Method:             "GET",
		PathPattern:        "/api/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for info: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Launch launches workflow from a remote r e a n a specification file

  This resource expects a remote reference to a REANA specification file needed to launch a workflow via URL.
*/
func (a *Client) Launch(params *LaunchParams, opts ...ClientOption) (*LaunchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLaunchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "launch",
		Method:             "POST",
		PathPattern:        "/api/launch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LaunchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LaunchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for launch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveFiles moves files within workspace

  This resource moves files within the workspace. Resource is expecting a workflow UUID.
*/
func (a *Client) MoveFiles(params *MoveFilesParams, opts ...ClientOption) (*MoveFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "move_files",
		Method:             "PUT",
		PathPattern:        "/api/workflows/move_files/{workflow_id_or_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MoveFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for move_files: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenInteractiveSession starts an interactive session inside the workflow workspace

  This resource is expecting a workflow to start an interactive session within its workspace.
*/
func (a *Client) OpenInteractiveSession(params *OpenInteractiveSessionParams, opts ...ClientOption) (*OpenInteractiveSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenInteractiveSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "open_interactive_session",
		Method:             "POST",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/open/{interactive_session_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OpenInteractiveSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenInteractiveSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for open_interactive_session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Ping pings the server healthcheck

  Ping the server.
*/
func (a *Client) Ping(params *PingParams, opts ...ClientOption) (*PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ping",
		Method:             "GET",
		PathPattern:        "/api/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RequestToken requests a new access token for the authenticated user

  This resource allows the user to create an empty REANA access token and mark it as requested.
*/
func (a *Client) RequestToken(params *RequestTokenParams, opts ...ClientOption) (*RequestTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "request_token",
		Method:             "PUT",
		PathPattern:        "/api/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for request_token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetWorkflowStatus sets status of a workflow

  This resource reports the status of a workflow. Resource is expecting a workflow UUID.
*/
func (a *Client) SetWorkflowStatus(params *SetWorkflowStatusParams, opts ...ClientOption) (*SetWorkflowStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWorkflowStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set_workflow_status",
		Method:             "PUT",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetWorkflowStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetWorkflowStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set_workflow_status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartWorkflow starts workflow

  This resource starts the workflow execution process. Resource is expecting a workflow UUID.
*/
func (a *Client) StartWorkflow(params *StartWorkflowParams, opts ...ClientOption) (*StartWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start_workflow",
		Method:             "POST",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start_workflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Status retrieves cluster health status

  Retrieve cluster health status.
*/
func (a *Client) Status(params *StatusParams, opts ...ClientOption) (*StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "status",
		Method:             "GET",
		PathPattern:        "/api/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadFile adds a file to the workspace

  This resource is expecting a file to place in the workspace.
*/
func (a *Client) UploadFile(params *UploadFileParams, opts ...ClientOption) (*UploadFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upload_file",
		Method:             "POST",
		PathPattern:        "/api/workflows/{workflow_id_or_name}/workspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upload_file: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
