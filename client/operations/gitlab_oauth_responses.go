// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GitlabOauthReader is a Reader for the GitlabOauth structure.
type GitlabOauthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GitlabOauthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGitlabOauthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewGitlabOauthCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGitlabOauthForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGitlabOauthInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGitlabOauthOK creates a GitlabOauthOK with default headers values
func NewGitlabOauthOK() *GitlabOauthOK {
	return &GitlabOauthOK{}
}

/* GitlabOauthOK describes a response with status code 200, with default header values.

Ping succeeded.
*/
type GitlabOauthOK struct {
	Payload *GitlabOauthOKBody
}

func (o *GitlabOauthOK) Error() string {
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthOK  %+v", 200, o.Payload)
}
func (o *GitlabOauthOK) GetPayload() *GitlabOauthOKBody {
	return o.Payload
}

func (o *GitlabOauthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GitlabOauthOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGitlabOauthCreated creates a GitlabOauthCreated with default headers values
func NewGitlabOauthCreated() *GitlabOauthCreated {
	return &GitlabOauthCreated{}
}

/* GitlabOauthCreated describes a response with status code 201, with default header values.

Authorization succeeded. GitLab secret created.
*/
type GitlabOauthCreated struct {
	Payload *GitlabOauthCreatedBody
}

func (o *GitlabOauthCreated) Error() string {
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthCreated  %+v", 201, o.Payload)
}
func (o *GitlabOauthCreated) GetPayload() *GitlabOauthCreatedBody {
	return o.Payload
}

func (o *GitlabOauthCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GitlabOauthCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGitlabOauthForbidden creates a GitlabOauthForbidden with default headers values
func NewGitlabOauthForbidden() *GitlabOauthForbidden {
	return &GitlabOauthForbidden{}
}

/* GitlabOauthForbidden describes a response with status code 403, with default header values.

Request failed. User token not valid.
*/
type GitlabOauthForbidden struct {
}

func (o *GitlabOauthForbidden) Error() string {
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthForbidden ", 403)
}

func (o *GitlabOauthForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGitlabOauthInternalServerError creates a GitlabOauthInternalServerError with default headers values
func NewGitlabOauthInternalServerError() *GitlabOauthInternalServerError {
	return &GitlabOauthInternalServerError{}
}

/* GitlabOauthInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal controller error.
*/
type GitlabOauthInternalServerError struct {
}

func (o *GitlabOauthInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthInternalServerError ", 500)
}

func (o *GitlabOauthInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GitlabOauthCreatedBody gitlab oauth created body
swagger:model GitlabOauthCreatedBody
*/
type GitlabOauthCreatedBody struct {

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this gitlab oauth created body
func (o *GitlabOauthCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gitlab oauth created body based on context it is used
func (o *GitlabOauthCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GitlabOauthCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GitlabOauthCreatedBody) UnmarshalBinary(b []byte) error {
	var res GitlabOauthCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GitlabOauthOKBody gitlab oauth o k body
swagger:model GitlabOauthOKBody
*/
type GitlabOauthOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this gitlab oauth o k body
func (o *GitlabOauthOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gitlab oauth o k body based on context it is used
func (o *GitlabOauthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GitlabOauthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GitlabOauthOKBody) UnmarshalBinary(b []byte) error {
	var res GitlabOauthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
