// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GitlabOauthReader is a Reader for the GitlabOauth structure.
type GitlabOauthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GitlabOauthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGitlabOauthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 302:
		result := NewGitlabOauthFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGitlabOauthForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGitlabOauthInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/gitlab] gitlab_oauth", response, response.Code())
	}
}

// NewGitlabOauthOK creates a GitlabOauthOK with default headers values
func NewGitlabOauthOK() *GitlabOauthOK {
	return &GitlabOauthOK{}
}

/*
GitlabOauthOK describes a response with status code 200, with default header values.

Ping succeeded.
*/
type GitlabOauthOK struct {
	Payload *GitlabOauthOKBody
}

// IsSuccess returns true when this gitlab oauth o k response has a 2xx status code
func (o *GitlabOauthOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this gitlab oauth o k response has a 3xx status code
func (o *GitlabOauthOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gitlab oauth o k response has a 4xx status code
func (o *GitlabOauthOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this gitlab oauth o k response has a 5xx status code
func (o *GitlabOauthOK) IsServerError() bool {
	return false
}

// IsCode returns true when this gitlab oauth o k response a status code equal to that given
func (o *GitlabOauthOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the gitlab oauth o k response
func (o *GitlabOauthOK) Code() int {
	return 200
}

func (o *GitlabOauthOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthOK %s", 200, payload)
}

func (o *GitlabOauthOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthOK %s", 200, payload)
}

func (o *GitlabOauthOK) GetPayload() *GitlabOauthOKBody {
	return o.Payload
}

func (o *GitlabOauthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GitlabOauthOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGitlabOauthFound creates a GitlabOauthFound with default headers values
func NewGitlabOauthFound() *GitlabOauthFound {
	return &GitlabOauthFound{}
}

/*
GitlabOauthFound describes a response with status code 302, with default header values.

Authorization succeeded. GitLab secret created.
*/
type GitlabOauthFound struct {
}

// IsSuccess returns true when this gitlab oauth found response has a 2xx status code
func (o *GitlabOauthFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this gitlab oauth found response has a 3xx status code
func (o *GitlabOauthFound) IsRedirect() bool {
	return true
}

// IsClientError returns true when this gitlab oauth found response has a 4xx status code
func (o *GitlabOauthFound) IsClientError() bool {
	return false
}

// IsServerError returns true when this gitlab oauth found response has a 5xx status code
func (o *GitlabOauthFound) IsServerError() bool {
	return false
}

// IsCode returns true when this gitlab oauth found response a status code equal to that given
func (o *GitlabOauthFound) IsCode(code int) bool {
	return code == 302
}

// Code gets the status code for the gitlab oauth found response
func (o *GitlabOauthFound) Code() int {
	return 302
}

func (o *GitlabOauthFound) Error() string {
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthFound", 302)
}

func (o *GitlabOauthFound) String() string {
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthFound", 302)
}

func (o *GitlabOauthFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGitlabOauthForbidden creates a GitlabOauthForbidden with default headers values
func NewGitlabOauthForbidden() *GitlabOauthForbidden {
	return &GitlabOauthForbidden{}
}

/*
GitlabOauthForbidden describes a response with status code 403, with default header values.

Request failed. User token not valid.
*/
type GitlabOauthForbidden struct {
	Payload *GitlabOauthForbiddenBody
}

// IsSuccess returns true when this gitlab oauth forbidden response has a 2xx status code
func (o *GitlabOauthForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this gitlab oauth forbidden response has a 3xx status code
func (o *GitlabOauthForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gitlab oauth forbidden response has a 4xx status code
func (o *GitlabOauthForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this gitlab oauth forbidden response has a 5xx status code
func (o *GitlabOauthForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this gitlab oauth forbidden response a status code equal to that given
func (o *GitlabOauthForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the gitlab oauth forbidden response
func (o *GitlabOauthForbidden) Code() int {
	return 403
}

func (o *GitlabOauthForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthForbidden %s", 403, payload)
}

func (o *GitlabOauthForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthForbidden %s", 403, payload)
}

func (o *GitlabOauthForbidden) GetPayload() *GitlabOauthForbiddenBody {
	return o.Payload
}

func (o *GitlabOauthForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GitlabOauthForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGitlabOauthInternalServerError creates a GitlabOauthInternalServerError with default headers values
func NewGitlabOauthInternalServerError() *GitlabOauthInternalServerError {
	return &GitlabOauthInternalServerError{}
}

/*
GitlabOauthInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal controller error.
*/
type GitlabOauthInternalServerError struct {
	Payload *GitlabOauthInternalServerErrorBody
}

// IsSuccess returns true when this gitlab oauth internal server error response has a 2xx status code
func (o *GitlabOauthInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this gitlab oauth internal server error response has a 3xx status code
func (o *GitlabOauthInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gitlab oauth internal server error response has a 4xx status code
func (o *GitlabOauthInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this gitlab oauth internal server error response has a 5xx status code
func (o *GitlabOauthInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this gitlab oauth internal server error response a status code equal to that given
func (o *GitlabOauthInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the gitlab oauth internal server error response
func (o *GitlabOauthInternalServerError) Code() int {
	return 500
}

func (o *GitlabOauthInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthInternalServerError %s", 500, payload)
}

func (o *GitlabOauthInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/gitlab][%d] gitlabOauthInternalServerError %s", 500, payload)
}

func (o *GitlabOauthInternalServerError) GetPayload() *GitlabOauthInternalServerErrorBody {
	return o.Payload
}

func (o *GitlabOauthInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GitlabOauthInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GitlabOauthForbiddenBody gitlab oauth forbidden body
swagger:model GitlabOauthForbiddenBody
*/
type GitlabOauthForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this gitlab oauth forbidden body
func (o *GitlabOauthForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gitlab oauth forbidden body based on context it is used
func (o *GitlabOauthForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GitlabOauthForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GitlabOauthForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GitlabOauthForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GitlabOauthInternalServerErrorBody gitlab oauth internal server error body
swagger:model GitlabOauthInternalServerErrorBody
*/
type GitlabOauthInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this gitlab oauth internal server error body
func (o *GitlabOauthInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gitlab oauth internal server error body based on context it is used
func (o *GitlabOauthInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GitlabOauthInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GitlabOauthInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GitlabOauthInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GitlabOauthOKBody gitlab oauth o k body
swagger:model GitlabOauthOKBody
*/
type GitlabOauthOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this gitlab oauth o k body
func (o *GitlabOauthOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gitlab oauth o k body based on context it is used
func (o *GitlabOauthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GitlabOauthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GitlabOauthOKBody) UnmarshalBinary(b []byte) error {
	var res GitlabOauthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
