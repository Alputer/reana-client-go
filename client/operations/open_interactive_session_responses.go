// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OpenInteractiveSessionReader is a Reader for the OpenInteractiveSession structure.
type OpenInteractiveSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OpenInteractiveSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOpenInteractiveSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOpenInteractiveSessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOpenInteractiveSessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOpenInteractiveSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOpenInteractiveSessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}] open_interactive_session", response, response.Code())
	}
}

// NewOpenInteractiveSessionOK creates a OpenInteractiveSessionOK with default headers values
func NewOpenInteractiveSessionOK() *OpenInteractiveSessionOK {
	return &OpenInteractiveSessionOK{}
}

/*
OpenInteractiveSessionOK describes a response with status code 200, with default header values.

Request succeeded. The interactive session has been opened.
*/
type OpenInteractiveSessionOK struct {
	Payload *OpenInteractiveSessionOKBody
}

// IsSuccess returns true when this open interactive session o k response has a 2xx status code
func (o *OpenInteractiveSessionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this open interactive session o k response has a 3xx status code
func (o *OpenInteractiveSessionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this open interactive session o k response has a 4xx status code
func (o *OpenInteractiveSessionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this open interactive session o k response has a 5xx status code
func (o *OpenInteractiveSessionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this open interactive session o k response a status code equal to that given
func (o *OpenInteractiveSessionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the open interactive session o k response
func (o *OpenInteractiveSessionOK) Code() int {
	return 200
}

func (o *OpenInteractiveSessionOK) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}][%d] openInteractiveSessionOK  %+v", 200, o.Payload)
}

func (o *OpenInteractiveSessionOK) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}][%d] openInteractiveSessionOK  %+v", 200, o.Payload)
}

func (o *OpenInteractiveSessionOK) GetPayload() *OpenInteractiveSessionOKBody {
	return o.Payload
}

func (o *OpenInteractiveSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OpenInteractiveSessionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenInteractiveSessionBadRequest creates a OpenInteractiveSessionBadRequest with default headers values
func NewOpenInteractiveSessionBadRequest() *OpenInteractiveSessionBadRequest {
	return &OpenInteractiveSessionBadRequest{}
}

/*
OpenInteractiveSessionBadRequest describes a response with status code 400, with default header values.

Request failed. The incoming payload seems malformed.
*/
type OpenInteractiveSessionBadRequest struct {
	Payload *OpenInteractiveSessionBadRequestBody
}

// IsSuccess returns true when this open interactive session bad request response has a 2xx status code
func (o *OpenInteractiveSessionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this open interactive session bad request response has a 3xx status code
func (o *OpenInteractiveSessionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this open interactive session bad request response has a 4xx status code
func (o *OpenInteractiveSessionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this open interactive session bad request response has a 5xx status code
func (o *OpenInteractiveSessionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this open interactive session bad request response a status code equal to that given
func (o *OpenInteractiveSessionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the open interactive session bad request response
func (o *OpenInteractiveSessionBadRequest) Code() int {
	return 400
}

func (o *OpenInteractiveSessionBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}][%d] openInteractiveSessionBadRequest  %+v", 400, o.Payload)
}

func (o *OpenInteractiveSessionBadRequest) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}][%d] openInteractiveSessionBadRequest  %+v", 400, o.Payload)
}

func (o *OpenInteractiveSessionBadRequest) GetPayload() *OpenInteractiveSessionBadRequestBody {
	return o.Payload
}

func (o *OpenInteractiveSessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OpenInteractiveSessionBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenInteractiveSessionForbidden creates a OpenInteractiveSessionForbidden with default headers values
func NewOpenInteractiveSessionForbidden() *OpenInteractiveSessionForbidden {
	return &OpenInteractiveSessionForbidden{}
}

/*
OpenInteractiveSessionForbidden describes a response with status code 403, with default header values.

Request failed. User is not allowed to access workflow.
*/
type OpenInteractiveSessionForbidden struct {
	Payload *OpenInteractiveSessionForbiddenBody
}

// IsSuccess returns true when this open interactive session forbidden response has a 2xx status code
func (o *OpenInteractiveSessionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this open interactive session forbidden response has a 3xx status code
func (o *OpenInteractiveSessionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this open interactive session forbidden response has a 4xx status code
func (o *OpenInteractiveSessionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this open interactive session forbidden response has a 5xx status code
func (o *OpenInteractiveSessionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this open interactive session forbidden response a status code equal to that given
func (o *OpenInteractiveSessionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the open interactive session forbidden response
func (o *OpenInteractiveSessionForbidden) Code() int {
	return 403
}

func (o *OpenInteractiveSessionForbidden) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}][%d] openInteractiveSessionForbidden  %+v", 403, o.Payload)
}

func (o *OpenInteractiveSessionForbidden) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}][%d] openInteractiveSessionForbidden  %+v", 403, o.Payload)
}

func (o *OpenInteractiveSessionForbidden) GetPayload() *OpenInteractiveSessionForbiddenBody {
	return o.Payload
}

func (o *OpenInteractiveSessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OpenInteractiveSessionForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenInteractiveSessionNotFound creates a OpenInteractiveSessionNotFound with default headers values
func NewOpenInteractiveSessionNotFound() *OpenInteractiveSessionNotFound {
	return &OpenInteractiveSessionNotFound{}
}

/*
OpenInteractiveSessionNotFound describes a response with status code 404, with default header values.

Request failed. Either user or workflow does not exist.
*/
type OpenInteractiveSessionNotFound struct {
	Payload *OpenInteractiveSessionNotFoundBody
}

// IsSuccess returns true when this open interactive session not found response has a 2xx status code
func (o *OpenInteractiveSessionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this open interactive session not found response has a 3xx status code
func (o *OpenInteractiveSessionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this open interactive session not found response has a 4xx status code
func (o *OpenInteractiveSessionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this open interactive session not found response has a 5xx status code
func (o *OpenInteractiveSessionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this open interactive session not found response a status code equal to that given
func (o *OpenInteractiveSessionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the open interactive session not found response
func (o *OpenInteractiveSessionNotFound) Code() int {
	return 404
}

func (o *OpenInteractiveSessionNotFound) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}][%d] openInteractiveSessionNotFound  %+v", 404, o.Payload)
}

func (o *OpenInteractiveSessionNotFound) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}][%d] openInteractiveSessionNotFound  %+v", 404, o.Payload)
}

func (o *OpenInteractiveSessionNotFound) GetPayload() *OpenInteractiveSessionNotFoundBody {
	return o.Payload
}

func (o *OpenInteractiveSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OpenInteractiveSessionNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenInteractiveSessionInternalServerError creates a OpenInteractiveSessionInternalServerError with default headers values
func NewOpenInteractiveSessionInternalServerError() *OpenInteractiveSessionInternalServerError {
	return &OpenInteractiveSessionInternalServerError{}
}

/*
OpenInteractiveSessionInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal controller error.
*/
type OpenInteractiveSessionInternalServerError struct {
	Payload *OpenInteractiveSessionInternalServerErrorBody
}

// IsSuccess returns true when this open interactive session internal server error response has a 2xx status code
func (o *OpenInteractiveSessionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this open interactive session internal server error response has a 3xx status code
func (o *OpenInteractiveSessionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this open interactive session internal server error response has a 4xx status code
func (o *OpenInteractiveSessionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this open interactive session internal server error response has a 5xx status code
func (o *OpenInteractiveSessionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this open interactive session internal server error response a status code equal to that given
func (o *OpenInteractiveSessionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the open interactive session internal server error response
func (o *OpenInteractiveSessionInternalServerError) Code() int {
	return 500
}

func (o *OpenInteractiveSessionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}][%d] openInteractiveSessionInternalServerError  %+v", 500, o.Payload)
}

func (o *OpenInteractiveSessionInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/open/{interactive_session_type}][%d] openInteractiveSessionInternalServerError  %+v", 500, o.Payload)
}

func (o *OpenInteractiveSessionInternalServerError) GetPayload() *OpenInteractiveSessionInternalServerErrorBody {
	return o.Payload
}

func (o *OpenInteractiveSessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OpenInteractiveSessionInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
OpenInteractiveSessionBadRequestBody open interactive session bad request body
swagger:model OpenInteractiveSessionBadRequestBody
*/
type OpenInteractiveSessionBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this open interactive session bad request body
func (o *OpenInteractiveSessionBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this open interactive session bad request body based on context it is used
func (o *OpenInteractiveSessionBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenInteractiveSessionBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenInteractiveSessionBadRequestBody) UnmarshalBinary(b []byte) error {
	var res OpenInteractiveSessionBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OpenInteractiveSessionBody open interactive session body
swagger:model OpenInteractiveSessionBody
*/
type OpenInteractiveSessionBody struct {

	// Replaces the default Docker image of an interactive session.
	Image string `json:"image,omitempty"`
}

// Validate validates this open interactive session body
func (o *OpenInteractiveSessionBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this open interactive session body based on context it is used
func (o *OpenInteractiveSessionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenInteractiveSessionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenInteractiveSessionBody) UnmarshalBinary(b []byte) error {
	var res OpenInteractiveSessionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OpenInteractiveSessionForbiddenBody open interactive session forbidden body
swagger:model OpenInteractiveSessionForbiddenBody
*/
type OpenInteractiveSessionForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this open interactive session forbidden body
func (o *OpenInteractiveSessionForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this open interactive session forbidden body based on context it is used
func (o *OpenInteractiveSessionForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenInteractiveSessionForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenInteractiveSessionForbiddenBody) UnmarshalBinary(b []byte) error {
	var res OpenInteractiveSessionForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OpenInteractiveSessionInternalServerErrorBody open interactive session internal server error body
swagger:model OpenInteractiveSessionInternalServerErrorBody
*/
type OpenInteractiveSessionInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this open interactive session internal server error body
func (o *OpenInteractiveSessionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this open interactive session internal server error body based on context it is used
func (o *OpenInteractiveSessionInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenInteractiveSessionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenInteractiveSessionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res OpenInteractiveSessionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OpenInteractiveSessionNotFoundBody open interactive session not found body
swagger:model OpenInteractiveSessionNotFoundBody
*/
type OpenInteractiveSessionNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this open interactive session not found body
func (o *OpenInteractiveSessionNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this open interactive session not found body based on context it is used
func (o *OpenInteractiveSessionNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenInteractiveSessionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenInteractiveSessionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res OpenInteractiveSessionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OpenInteractiveSessionOKBody open interactive session o k body
swagger:model OpenInteractiveSessionOKBody
*/
type OpenInteractiveSessionOKBody struct {

	// path
	Path string `json:"path,omitempty"`
}

// Validate validates this open interactive session o k body
func (o *OpenInteractiveSessionOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this open interactive session o k body based on context it is used
func (o *OpenInteractiveSessionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenInteractiveSessionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenInteractiveSessionOKBody) UnmarshalBinary(b []byte) error {
	var res OpenInteractiveSessionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
