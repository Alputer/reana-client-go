// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UploadFileReader is a Reader for the UploadFile structure.
type UploadFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadFileOK creates a UploadFileOK with default headers values
func NewUploadFileOK() *UploadFileOK {
	return &UploadFileOK{}
}

/*
UploadFileOK describes a response with status code 200, with default header values.

Request succeeded. File successfully transferred.
*/
type UploadFileOK struct {
	Payload *UploadFileOKBody
}

// IsSuccess returns true when this upload file o k response has a 2xx status code
func (o *UploadFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload file o k response has a 3xx status code
func (o *UploadFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload file o k response has a 4xx status code
func (o *UploadFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload file o k response has a 5xx status code
func (o *UploadFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload file o k response a status code equal to that given
func (o *UploadFileOK) IsCode(code int) bool {
	return code == 200
}

func (o *UploadFileOK) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/workspace][%d] uploadFileOK  %+v", 200, o.Payload)
}

func (o *UploadFileOK) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/workspace][%d] uploadFileOK  %+v", 200, o.Payload)
}

func (o *UploadFileOK) GetPayload() *UploadFileOKBody {
	return o.Payload
}

func (o *UploadFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadFileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileBadRequest creates a UploadFileBadRequest with default headers values
func NewUploadFileBadRequest() *UploadFileBadRequest {
	return &UploadFileBadRequest{}
}

/*
UploadFileBadRequest describes a response with status code 400, with default header values.

Request failed. The incoming payload seems malformed
*/
type UploadFileBadRequest struct {
	Payload *UploadFileBadRequestBody
}

// IsSuccess returns true when this upload file bad request response has a 2xx status code
func (o *UploadFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload file bad request response has a 3xx status code
func (o *UploadFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload file bad request response has a 4xx status code
func (o *UploadFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload file bad request response has a 5xx status code
func (o *UploadFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upload file bad request response a status code equal to that given
func (o *UploadFileBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UploadFileBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/workspace][%d] uploadFileBadRequest  %+v", 400, o.Payload)
}

func (o *UploadFileBadRequest) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/workspace][%d] uploadFileBadRequest  %+v", 400, o.Payload)
}

func (o *UploadFileBadRequest) GetPayload() *UploadFileBadRequestBody {
	return o.Payload
}

func (o *UploadFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadFileBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileForbidden creates a UploadFileForbidden with default headers values
func NewUploadFileForbidden() *UploadFileForbidden {
	return &UploadFileForbidden{}
}

/*
UploadFileForbidden describes a response with status code 403, with default header values.

Request failed. User is not allowed to access workflow.
*/
type UploadFileForbidden struct {
	Payload *UploadFileForbiddenBody
}

// IsSuccess returns true when this upload file forbidden response has a 2xx status code
func (o *UploadFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload file forbidden response has a 3xx status code
func (o *UploadFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload file forbidden response has a 4xx status code
func (o *UploadFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload file forbidden response has a 5xx status code
func (o *UploadFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upload file forbidden response a status code equal to that given
func (o *UploadFileForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UploadFileForbidden) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/workspace][%d] uploadFileForbidden  %+v", 403, o.Payload)
}

func (o *UploadFileForbidden) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/workspace][%d] uploadFileForbidden  %+v", 403, o.Payload)
}

func (o *UploadFileForbidden) GetPayload() *UploadFileForbiddenBody {
	return o.Payload
}

func (o *UploadFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadFileForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileNotFound creates a UploadFileNotFound with default headers values
func NewUploadFileNotFound() *UploadFileNotFound {
	return &UploadFileNotFound{}
}

/*
UploadFileNotFound describes a response with status code 404, with default header values.

Request failed. User does not exist.
*/
type UploadFileNotFound struct {
	Payload *UploadFileNotFoundBody
}

// IsSuccess returns true when this upload file not found response has a 2xx status code
func (o *UploadFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload file not found response has a 3xx status code
func (o *UploadFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload file not found response has a 4xx status code
func (o *UploadFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload file not found response has a 5xx status code
func (o *UploadFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upload file not found response a status code equal to that given
func (o *UploadFileNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UploadFileNotFound) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/workspace][%d] uploadFileNotFound  %+v", 404, o.Payload)
}

func (o *UploadFileNotFound) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/workspace][%d] uploadFileNotFound  %+v", 404, o.Payload)
}

func (o *UploadFileNotFound) GetPayload() *UploadFileNotFoundBody {
	return o.Payload
}

func (o *UploadFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadFileNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileInternalServerError creates a UploadFileInternalServerError with default headers values
func NewUploadFileInternalServerError() *UploadFileInternalServerError {
	return &UploadFileInternalServerError{}
}

/*
UploadFileInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal server error.
*/
type UploadFileInternalServerError struct {
	Payload *UploadFileInternalServerErrorBody
}

// IsSuccess returns true when this upload file internal server error response has a 2xx status code
func (o *UploadFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload file internal server error response has a 3xx status code
func (o *UploadFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload file internal server error response has a 4xx status code
func (o *UploadFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload file internal server error response has a 5xx status code
func (o *UploadFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upload file internal server error response a status code equal to that given
func (o *UploadFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UploadFileInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/workspace][%d] uploadFileInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadFileInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/workspace][%d] uploadFileInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadFileInternalServerError) GetPayload() *UploadFileInternalServerErrorBody {
	return o.Payload
}

func (o *UploadFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadFileInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UploadFileBadRequestBody upload file bad request body
swagger:model UploadFileBadRequestBody
*/
type UploadFileBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this upload file bad request body
func (o *UploadFileBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this upload file bad request body based on context it is used
func (o *UploadFileBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadFileBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadFileBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UploadFileBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UploadFileForbiddenBody upload file forbidden body
swagger:model UploadFileForbiddenBody
*/
type UploadFileForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this upload file forbidden body
func (o *UploadFileForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this upload file forbidden body based on context it is used
func (o *UploadFileForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadFileForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadFileForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UploadFileForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UploadFileInternalServerErrorBody upload file internal server error body
swagger:model UploadFileInternalServerErrorBody
*/
type UploadFileInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this upload file internal server error body
func (o *UploadFileInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this upload file internal server error body based on context it is used
func (o *UploadFileInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadFileInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadFileInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UploadFileInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UploadFileNotFoundBody upload file not found body
swagger:model UploadFileNotFoundBody
*/
type UploadFileNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this upload file not found body
func (o *UploadFileNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this upload file not found body based on context it is used
func (o *UploadFileNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadFileNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadFileNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UploadFileNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UploadFileOKBody upload file o k body
swagger:model UploadFileOKBody
*/
type UploadFileOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this upload file o k body
func (o *UploadFileOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this upload file o k body based on context it is used
func (o *UploadFileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadFileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadFileOKBody) UnmarshalBinary(b []byte) error {
	var res UploadFileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
