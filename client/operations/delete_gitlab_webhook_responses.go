// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteGitlabWebhookReader is a Reader for the DeleteGitlabWebhook structure.
type DeleteGitlabWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGitlabWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteGitlabWebhookNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteGitlabWebhookForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGitlabWebhookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteGitlabWebhookInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /api/gitlab/webhook] delete_gitlab_webhook", response, response.Code())
	}
}

// NewDeleteGitlabWebhookNoContent creates a DeleteGitlabWebhookNoContent with default headers values
func NewDeleteGitlabWebhookNoContent() *DeleteGitlabWebhookNoContent {
	return &DeleteGitlabWebhookNoContent{}
}

/*
DeleteGitlabWebhookNoContent describes a response with status code 204, with default header values.

The webhook was properly deleted.
*/
type DeleteGitlabWebhookNoContent struct {
}

// IsSuccess returns true when this delete gitlab webhook no content response has a 2xx status code
func (o *DeleteGitlabWebhookNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete gitlab webhook no content response has a 3xx status code
func (o *DeleteGitlabWebhookNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete gitlab webhook no content response has a 4xx status code
func (o *DeleteGitlabWebhookNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete gitlab webhook no content response has a 5xx status code
func (o *DeleteGitlabWebhookNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete gitlab webhook no content response a status code equal to that given
func (o *DeleteGitlabWebhookNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete gitlab webhook no content response
func (o *DeleteGitlabWebhookNoContent) Code() int {
	return 204
}

func (o *DeleteGitlabWebhookNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/gitlab/webhook][%d] deleteGitlabWebhookNoContent", 204)
}

func (o *DeleteGitlabWebhookNoContent) String() string {
	return fmt.Sprintf("[DELETE /api/gitlab/webhook][%d] deleteGitlabWebhookNoContent", 204)
}

func (o *DeleteGitlabWebhookNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGitlabWebhookForbidden creates a DeleteGitlabWebhookForbidden with default headers values
func NewDeleteGitlabWebhookForbidden() *DeleteGitlabWebhookForbidden {
	return &DeleteGitlabWebhookForbidden{}
}

/*
DeleteGitlabWebhookForbidden describes a response with status code 403, with default header values.

Request failed. User token not valid.
*/
type DeleteGitlabWebhookForbidden struct {
	Payload *DeleteGitlabWebhookForbiddenBody
}

// IsSuccess returns true when this delete gitlab webhook forbidden response has a 2xx status code
func (o *DeleteGitlabWebhookForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete gitlab webhook forbidden response has a 3xx status code
func (o *DeleteGitlabWebhookForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete gitlab webhook forbidden response has a 4xx status code
func (o *DeleteGitlabWebhookForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete gitlab webhook forbidden response has a 5xx status code
func (o *DeleteGitlabWebhookForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete gitlab webhook forbidden response a status code equal to that given
func (o *DeleteGitlabWebhookForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete gitlab webhook forbidden response
func (o *DeleteGitlabWebhookForbidden) Code() int {
	return 403
}

func (o *DeleteGitlabWebhookForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/gitlab/webhook][%d] deleteGitlabWebhookForbidden %s", 403, payload)
}

func (o *DeleteGitlabWebhookForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/gitlab/webhook][%d] deleteGitlabWebhookForbidden %s", 403, payload)
}

func (o *DeleteGitlabWebhookForbidden) GetPayload() *DeleteGitlabWebhookForbiddenBody {
	return o.Payload
}

func (o *DeleteGitlabWebhookForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteGitlabWebhookForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGitlabWebhookNotFound creates a DeleteGitlabWebhookNotFound with default headers values
func NewDeleteGitlabWebhookNotFound() *DeleteGitlabWebhookNotFound {
	return &DeleteGitlabWebhookNotFound{}
}

/*
DeleteGitlabWebhookNotFound describes a response with status code 404, with default header values.

No webhook found with provided id.
*/
type DeleteGitlabWebhookNotFound struct {
}

// IsSuccess returns true when this delete gitlab webhook not found response has a 2xx status code
func (o *DeleteGitlabWebhookNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete gitlab webhook not found response has a 3xx status code
func (o *DeleteGitlabWebhookNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete gitlab webhook not found response has a 4xx status code
func (o *DeleteGitlabWebhookNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete gitlab webhook not found response has a 5xx status code
func (o *DeleteGitlabWebhookNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete gitlab webhook not found response a status code equal to that given
func (o *DeleteGitlabWebhookNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete gitlab webhook not found response
func (o *DeleteGitlabWebhookNotFound) Code() int {
	return 404
}

func (o *DeleteGitlabWebhookNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/gitlab/webhook][%d] deleteGitlabWebhookNotFound", 404)
}

func (o *DeleteGitlabWebhookNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/gitlab/webhook][%d] deleteGitlabWebhookNotFound", 404)
}

func (o *DeleteGitlabWebhookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGitlabWebhookInternalServerError creates a DeleteGitlabWebhookInternalServerError with default headers values
func NewDeleteGitlabWebhookInternalServerError() *DeleteGitlabWebhookInternalServerError {
	return &DeleteGitlabWebhookInternalServerError{}
}

/*
DeleteGitlabWebhookInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal controller error.
*/
type DeleteGitlabWebhookInternalServerError struct {
	Payload *DeleteGitlabWebhookInternalServerErrorBody
}

// IsSuccess returns true when this delete gitlab webhook internal server error response has a 2xx status code
func (o *DeleteGitlabWebhookInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete gitlab webhook internal server error response has a 3xx status code
func (o *DeleteGitlabWebhookInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete gitlab webhook internal server error response has a 4xx status code
func (o *DeleteGitlabWebhookInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete gitlab webhook internal server error response has a 5xx status code
func (o *DeleteGitlabWebhookInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete gitlab webhook internal server error response a status code equal to that given
func (o *DeleteGitlabWebhookInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete gitlab webhook internal server error response
func (o *DeleteGitlabWebhookInternalServerError) Code() int {
	return 500
}

func (o *DeleteGitlabWebhookInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/gitlab/webhook][%d] deleteGitlabWebhookInternalServerError %s", 500, payload)
}

func (o *DeleteGitlabWebhookInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/gitlab/webhook][%d] deleteGitlabWebhookInternalServerError %s", 500, payload)
}

func (o *DeleteGitlabWebhookInternalServerError) GetPayload() *DeleteGitlabWebhookInternalServerErrorBody {
	return o.Payload
}

func (o *DeleteGitlabWebhookInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteGitlabWebhookInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteGitlabWebhookBody delete gitlab webhook body
swagger:model DeleteGitlabWebhookBody
*/
type DeleteGitlabWebhookBody struct {

	// The GitLab webhook id of the project.
	// Required: true
	HookID *int64 `json:"hook_id"`

	// The GitLab project id.
	// Required: true
	ProjectID *string `json:"project_id"`
}

// Validate validates this delete gitlab webhook body
func (o *DeleteGitlabWebhookBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHookID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteGitlabWebhookBody) validateHookID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"hook_id", "body", o.HookID); err != nil {
		return err
	}

	return nil
}

func (o *DeleteGitlabWebhookBody) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"project_id", "body", o.ProjectID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete gitlab webhook body based on context it is used
func (o *DeleteGitlabWebhookBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteGitlabWebhookBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteGitlabWebhookBody) UnmarshalBinary(b []byte) error {
	var res DeleteGitlabWebhookBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteGitlabWebhookForbiddenBody delete gitlab webhook forbidden body
swagger:model DeleteGitlabWebhookForbiddenBody
*/
type DeleteGitlabWebhookForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete gitlab webhook forbidden body
func (o *DeleteGitlabWebhookForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete gitlab webhook forbidden body based on context it is used
func (o *DeleteGitlabWebhookForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteGitlabWebhookForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteGitlabWebhookForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteGitlabWebhookForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteGitlabWebhookInternalServerErrorBody delete gitlab webhook internal server error body
swagger:model DeleteGitlabWebhookInternalServerErrorBody
*/
type DeleteGitlabWebhookInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete gitlab webhook internal server error body
func (o *DeleteGitlabWebhookInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete gitlab webhook internal server error body based on context it is used
func (o *DeleteGitlabWebhookInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteGitlabWebhookInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteGitlabWebhookInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteGitlabWebhookInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
