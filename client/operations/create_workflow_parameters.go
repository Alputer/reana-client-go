// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateWorkflowParams creates a new CreateWorkflowParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateWorkflowParams() *CreateWorkflowParams {
	return &CreateWorkflowParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateWorkflowParamsWithTimeout creates a new CreateWorkflowParams object
// with the ability to set a timeout on a request.
func NewCreateWorkflowParamsWithTimeout(timeout time.Duration) *CreateWorkflowParams {
	return &CreateWorkflowParams{
		timeout: timeout,
	}
}

// NewCreateWorkflowParamsWithContext creates a new CreateWorkflowParams object
// with the ability to set a context for a request.
func NewCreateWorkflowParamsWithContext(ctx context.Context) *CreateWorkflowParams {
	return &CreateWorkflowParams{
		Context: ctx,
	}
}

// NewCreateWorkflowParamsWithHTTPClient creates a new CreateWorkflowParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateWorkflowParamsWithHTTPClient(client *http.Client) *CreateWorkflowParams {
	return &CreateWorkflowParams{
		HTTPClient: client,
	}
}

/* CreateWorkflowParams contains all the parameters to send to the API endpoint
   for the create workflow operation.

   Typically these are written to a http.Request.
*/
type CreateWorkflowParams struct {

	/* AccessToken.

	   The API access_token of workflow owner.
	*/
	AccessToken *string

	/* ReanaSpecification.

	   REANA specification with necessary data to instantiate a workflow.
	*/
	ReanaSpecification interface{}

	/* Spec.

	   Remote repository which contains a valid REANA specification.
	*/
	Spec *string

	/* WorkflowName.

	   Name of the workflow to be created. If not provided name will be generated.
	*/
	WorkflowName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create workflow params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateWorkflowParams) WithDefaults() *CreateWorkflowParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create workflow params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateWorkflowParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create workflow params
func (o *CreateWorkflowParams) WithTimeout(timeout time.Duration) *CreateWorkflowParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create workflow params
func (o *CreateWorkflowParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create workflow params
func (o *CreateWorkflowParams) WithContext(ctx context.Context) *CreateWorkflowParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create workflow params
func (o *CreateWorkflowParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create workflow params
func (o *CreateWorkflowParams) WithHTTPClient(client *http.Client) *CreateWorkflowParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create workflow params
func (o *CreateWorkflowParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessToken adds the accessToken to the create workflow params
func (o *CreateWorkflowParams) WithAccessToken(accessToken *string) *CreateWorkflowParams {
	o.SetAccessToken(accessToken)
	return o
}

// SetAccessToken adds the accessToken to the create workflow params
func (o *CreateWorkflowParams) SetAccessToken(accessToken *string) {
	o.AccessToken = accessToken
}

// WithReanaSpecification adds the reanaSpecification to the create workflow params
func (o *CreateWorkflowParams) WithReanaSpecification(reanaSpecification interface{}) *CreateWorkflowParams {
	o.SetReanaSpecification(reanaSpecification)
	return o
}

// SetReanaSpecification adds the reanaSpecification to the create workflow params
func (o *CreateWorkflowParams) SetReanaSpecification(reanaSpecification interface{}) {
	o.ReanaSpecification = reanaSpecification
}

// WithSpec adds the spec to the create workflow params
func (o *CreateWorkflowParams) WithSpec(spec *string) *CreateWorkflowParams {
	o.SetSpec(spec)
	return o
}

// SetSpec adds the spec to the create workflow params
func (o *CreateWorkflowParams) SetSpec(spec *string) {
	o.Spec = spec
}

// WithWorkflowName adds the workflowName to the create workflow params
func (o *CreateWorkflowParams) WithWorkflowName(workflowName string) *CreateWorkflowParams {
	o.SetWorkflowName(workflowName)
	return o
}

// SetWorkflowName adds the workflowName to the create workflow params
func (o *CreateWorkflowParams) SetWorkflowName(workflowName string) {
	o.WorkflowName = workflowName
}

// WriteToRequest writes these params to a swagger request
func (o *CreateWorkflowParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessToken != nil {

		// query param access_token
		var qrAccessToken string

		if o.AccessToken != nil {
			qrAccessToken = *o.AccessToken
		}
		qAccessToken := qrAccessToken
		if qAccessToken != "" {

			if err := r.SetQueryParam("access_token", qAccessToken); err != nil {
				return err
			}
		}
	}
	if o.ReanaSpecification != nil {
		if err := r.SetBodyParam(o.ReanaSpecification); err != nil {
			return err
		}
	}

	if o.Spec != nil {

		// query param spec
		var qrSpec string

		if o.Spec != nil {
			qrSpec = *o.Spec
		}
		qSpec := qrSpec
		if qSpec != "" {

			if err := r.SetQueryParam("spec", qSpec); err != nil {
				return err
			}
		}
	}

	// query param workflow_name
	qrWorkflowName := o.WorkflowName
	qWorkflowName := qrWorkflowName
	if qWorkflowName != "" {

		if err := r.SetQueryParam("workflow_name", qWorkflowName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
