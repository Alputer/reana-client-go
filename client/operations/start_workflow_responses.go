// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StartWorkflowReader is a Reader for the StartWorkflow structure.
type StartWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStartWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStartWorkflowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStartWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewStartWorkflowConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStartWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewStartWorkflowNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/workflows/{workflow_id_or_name}/start] start_workflow", response, response.Code())
	}
}

// NewStartWorkflowOK creates a StartWorkflowOK with default headers values
func NewStartWorkflowOK() *StartWorkflowOK {
	return &StartWorkflowOK{}
}

/*
StartWorkflowOK describes a response with status code 200, with default header values.

Request succeeded. Info about a workflow, including the execution status is returned.
*/
type StartWorkflowOK struct {
	Payload *StartWorkflowOKBody
}

// IsSuccess returns true when this start workflow o k response has a 2xx status code
func (o *StartWorkflowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start workflow o k response has a 3xx status code
func (o *StartWorkflowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start workflow o k response has a 4xx status code
func (o *StartWorkflowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this start workflow o k response has a 5xx status code
func (o *StartWorkflowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this start workflow o k response a status code equal to that given
func (o *StartWorkflowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the start workflow o k response
func (o *StartWorkflowOK) Code() int {
	return 200
}

func (o *StartWorkflowOK) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowOK  %+v", 200, o.Payload)
}

func (o *StartWorkflowOK) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowOK  %+v", 200, o.Payload)
}

func (o *StartWorkflowOK) GetPayload() *StartWorkflowOKBody {
	return o.Payload
}

func (o *StartWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartWorkflowOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartWorkflowBadRequest creates a StartWorkflowBadRequest with default headers values
func NewStartWorkflowBadRequest() *StartWorkflowBadRequest {
	return &StartWorkflowBadRequest{}
}

/*
StartWorkflowBadRequest describes a response with status code 400, with default header values.

Request failed. The incoming payload seems malformed.
*/
type StartWorkflowBadRequest struct {
	Payload *StartWorkflowBadRequestBody
}

// IsSuccess returns true when this start workflow bad request response has a 2xx status code
func (o *StartWorkflowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start workflow bad request response has a 3xx status code
func (o *StartWorkflowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start workflow bad request response has a 4xx status code
func (o *StartWorkflowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this start workflow bad request response has a 5xx status code
func (o *StartWorkflowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this start workflow bad request response a status code equal to that given
func (o *StartWorkflowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the start workflow bad request response
func (o *StartWorkflowBadRequest) Code() int {
	return 400
}

func (o *StartWorkflowBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *StartWorkflowBadRequest) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *StartWorkflowBadRequest) GetPayload() *StartWorkflowBadRequestBody {
	return o.Payload
}

func (o *StartWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartWorkflowBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartWorkflowForbidden creates a StartWorkflowForbidden with default headers values
func NewStartWorkflowForbidden() *StartWorkflowForbidden {
	return &StartWorkflowForbidden{}
}

/*
StartWorkflowForbidden describes a response with status code 403, with default header values.

Request failed. User is not allowed to access workflow.
*/
type StartWorkflowForbidden struct {
	Payload *StartWorkflowForbiddenBody
}

// IsSuccess returns true when this start workflow forbidden response has a 2xx status code
func (o *StartWorkflowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start workflow forbidden response has a 3xx status code
func (o *StartWorkflowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start workflow forbidden response has a 4xx status code
func (o *StartWorkflowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this start workflow forbidden response has a 5xx status code
func (o *StartWorkflowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this start workflow forbidden response a status code equal to that given
func (o *StartWorkflowForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the start workflow forbidden response
func (o *StartWorkflowForbidden) Code() int {
	return 403
}

func (o *StartWorkflowForbidden) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *StartWorkflowForbidden) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *StartWorkflowForbidden) GetPayload() *StartWorkflowForbiddenBody {
	return o.Payload
}

func (o *StartWorkflowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartWorkflowForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartWorkflowNotFound creates a StartWorkflowNotFound with default headers values
func NewStartWorkflowNotFound() *StartWorkflowNotFound {
	return &StartWorkflowNotFound{}
}

/*
StartWorkflowNotFound describes a response with status code 404, with default header values.

Request failed. Either User or Workflow does not exist.
*/
type StartWorkflowNotFound struct {
	Payload *StartWorkflowNotFoundBody
}

// IsSuccess returns true when this start workflow not found response has a 2xx status code
func (o *StartWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start workflow not found response has a 3xx status code
func (o *StartWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start workflow not found response has a 4xx status code
func (o *StartWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this start workflow not found response has a 5xx status code
func (o *StartWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this start workflow not found response a status code equal to that given
func (o *StartWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the start workflow not found response
func (o *StartWorkflowNotFound) Code() int {
	return 404
}

func (o *StartWorkflowNotFound) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *StartWorkflowNotFound) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *StartWorkflowNotFound) GetPayload() *StartWorkflowNotFoundBody {
	return o.Payload
}

func (o *StartWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartWorkflowNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartWorkflowConflict creates a StartWorkflowConflict with default headers values
func NewStartWorkflowConflict() *StartWorkflowConflict {
	return &StartWorkflowConflict{}
}

/*
StartWorkflowConflict describes a response with status code 409, with default header values.

Request failed. The workflow could not be started due to a conflict.
*/
type StartWorkflowConflict struct {
	Payload *StartWorkflowConflictBody
}

// IsSuccess returns true when this start workflow conflict response has a 2xx status code
func (o *StartWorkflowConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start workflow conflict response has a 3xx status code
func (o *StartWorkflowConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start workflow conflict response has a 4xx status code
func (o *StartWorkflowConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this start workflow conflict response has a 5xx status code
func (o *StartWorkflowConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this start workflow conflict response a status code equal to that given
func (o *StartWorkflowConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the start workflow conflict response
func (o *StartWorkflowConflict) Code() int {
	return 409
}

func (o *StartWorkflowConflict) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowConflict  %+v", 409, o.Payload)
}

func (o *StartWorkflowConflict) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowConflict  %+v", 409, o.Payload)
}

func (o *StartWorkflowConflict) GetPayload() *StartWorkflowConflictBody {
	return o.Payload
}

func (o *StartWorkflowConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartWorkflowConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartWorkflowInternalServerError creates a StartWorkflowInternalServerError with default headers values
func NewStartWorkflowInternalServerError() *StartWorkflowInternalServerError {
	return &StartWorkflowInternalServerError{}
}

/*
StartWorkflowInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal controller error.
*/
type StartWorkflowInternalServerError struct {
	Payload *StartWorkflowInternalServerErrorBody
}

// IsSuccess returns true when this start workflow internal server error response has a 2xx status code
func (o *StartWorkflowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start workflow internal server error response has a 3xx status code
func (o *StartWorkflowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start workflow internal server error response has a 4xx status code
func (o *StartWorkflowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this start workflow internal server error response has a 5xx status code
func (o *StartWorkflowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this start workflow internal server error response a status code equal to that given
func (o *StartWorkflowInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the start workflow internal server error response
func (o *StartWorkflowInternalServerError) Code() int {
	return 500
}

func (o *StartWorkflowInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *StartWorkflowInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *StartWorkflowInternalServerError) GetPayload() *StartWorkflowInternalServerErrorBody {
	return o.Payload
}

func (o *StartWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartWorkflowInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartWorkflowNotImplemented creates a StartWorkflowNotImplemented with default headers values
func NewStartWorkflowNotImplemented() *StartWorkflowNotImplemented {
	return &StartWorkflowNotImplemented{}
}

/*
StartWorkflowNotImplemented describes a response with status code 501, with default header values.

Request failed. The specified status change is not implemented.
*/
type StartWorkflowNotImplemented struct {
	Payload *StartWorkflowNotImplementedBody
}

// IsSuccess returns true when this start workflow not implemented response has a 2xx status code
func (o *StartWorkflowNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start workflow not implemented response has a 3xx status code
func (o *StartWorkflowNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start workflow not implemented response has a 4xx status code
func (o *StartWorkflowNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this start workflow not implemented response has a 5xx status code
func (o *StartWorkflowNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this start workflow not implemented response a status code equal to that given
func (o *StartWorkflowNotImplemented) IsCode(code int) bool {
	return code == 501
}

// Code gets the status code for the start workflow not implemented response
func (o *StartWorkflowNotImplemented) Code() int {
	return 501
}

func (o *StartWorkflowNotImplemented) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowNotImplemented  %+v", 501, o.Payload)
}

func (o *StartWorkflowNotImplemented) String() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowNotImplemented  %+v", 501, o.Payload)
}

func (o *StartWorkflowNotImplemented) GetPayload() *StartWorkflowNotImplementedBody {
	return o.Payload
}

func (o *StartWorkflowNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartWorkflowNotImplementedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
StartWorkflowBadRequestBody start workflow bad request body
swagger:model StartWorkflowBadRequestBody
*/
type StartWorkflowBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this start workflow bad request body
func (o *StartWorkflowBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start workflow bad request body based on context it is used
func (o *StartWorkflowBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartWorkflowBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartWorkflowBadRequestBody) UnmarshalBinary(b []byte) error {
	var res StartWorkflowBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartWorkflowBody start workflow body
swagger:model StartWorkflowBody
*/
type StartWorkflowBody struct {

	// input parameters
	InputParameters interface{} `json:"input_parameters,omitempty"`

	// operational options
	OperationalOptions interface{} `json:"operational_options,omitempty"`

	// reana specification
	ReanaSpecification interface{} `json:"reana_specification,omitempty"`

	// restart
	Restart bool `json:"restart,omitempty"`
}

// Validate validates this start workflow body
func (o *StartWorkflowBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start workflow body based on context it is used
func (o *StartWorkflowBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartWorkflowBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartWorkflowBody) UnmarshalBinary(b []byte) error {
	var res StartWorkflowBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartWorkflowConflictBody start workflow conflict body
swagger:model StartWorkflowConflictBody
*/
type StartWorkflowConflictBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this start workflow conflict body
func (o *StartWorkflowConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start workflow conflict body based on context it is used
func (o *StartWorkflowConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartWorkflowConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartWorkflowConflictBody) UnmarshalBinary(b []byte) error {
	var res StartWorkflowConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartWorkflowForbiddenBody start workflow forbidden body
swagger:model StartWorkflowForbiddenBody
*/
type StartWorkflowForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this start workflow forbidden body
func (o *StartWorkflowForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start workflow forbidden body based on context it is used
func (o *StartWorkflowForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartWorkflowForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartWorkflowForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StartWorkflowForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartWorkflowInternalServerErrorBody start workflow internal server error body
swagger:model StartWorkflowInternalServerErrorBody
*/
type StartWorkflowInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this start workflow internal server error body
func (o *StartWorkflowInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start workflow internal server error body based on context it is used
func (o *StartWorkflowInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartWorkflowInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartWorkflowInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res StartWorkflowInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartWorkflowNotFoundBody start workflow not found body
swagger:model StartWorkflowNotFoundBody
*/
type StartWorkflowNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this start workflow not found body
func (o *StartWorkflowNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start workflow not found body based on context it is used
func (o *StartWorkflowNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartWorkflowNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartWorkflowNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StartWorkflowNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartWorkflowNotImplementedBody start workflow not implemented body
swagger:model StartWorkflowNotImplementedBody
*/
type StartWorkflowNotImplementedBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this start workflow not implemented body
func (o *StartWorkflowNotImplementedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start workflow not implemented body based on context it is used
func (o *StartWorkflowNotImplementedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartWorkflowNotImplementedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartWorkflowNotImplementedBody) UnmarshalBinary(b []byte) error {
	var res StartWorkflowNotImplementedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartWorkflowOKBody start workflow o k body
swagger:model StartWorkflowOKBody
*/
type StartWorkflowOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// user
	User string `json:"user,omitempty"`

	// workflow id
	WorkflowID string `json:"workflow_id,omitempty"`

	// workflow name
	WorkflowName string `json:"workflow_name,omitempty"`
}

// Validate validates this start workflow o k body
func (o *StartWorkflowOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start workflow o k body based on context it is used
func (o *StartWorkflowOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartWorkflowOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartWorkflowOKBody) UnmarshalBinary(b []byte) error {
	var res StartWorkflowOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
