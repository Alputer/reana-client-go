// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StartWorkflowReader is a Reader for the StartWorkflow structure.
type StartWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStartWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStartWorkflowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStartWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewStartWorkflowConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStartWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewStartWorkflowNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStartWorkflowOK creates a StartWorkflowOK with default headers values
func NewStartWorkflowOK() *StartWorkflowOK {
	return &StartWorkflowOK{}
}

/* StartWorkflowOK describes a response with status code 200, with default header values.

Request succeeded. Info about a workflow, including the execution status is returned.
*/
type StartWorkflowOK struct {
	Payload *StartWorkflowOKBody
}

func (o *StartWorkflowOK) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowOK  %+v", 200, o.Payload)
}
func (o *StartWorkflowOK) GetPayload() *StartWorkflowOKBody {
	return o.Payload
}

func (o *StartWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartWorkflowOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartWorkflowBadRequest creates a StartWorkflowBadRequest with default headers values
func NewStartWorkflowBadRequest() *StartWorkflowBadRequest {
	return &StartWorkflowBadRequest{}
}

/* StartWorkflowBadRequest describes a response with status code 400, with default header values.

Request failed. The incoming payload seems malformed.
*/
type StartWorkflowBadRequest struct {
}

func (o *StartWorkflowBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowBadRequest ", 400)
}

func (o *StartWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartWorkflowForbidden creates a StartWorkflowForbidden with default headers values
func NewStartWorkflowForbidden() *StartWorkflowForbidden {
	return &StartWorkflowForbidden{}
}

/* StartWorkflowForbidden describes a response with status code 403, with default header values.

Request failed. User is not allowed to access workflow.
*/
type StartWorkflowForbidden struct {
}

func (o *StartWorkflowForbidden) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowForbidden ", 403)
}

func (o *StartWorkflowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartWorkflowNotFound creates a StartWorkflowNotFound with default headers values
func NewStartWorkflowNotFound() *StartWorkflowNotFound {
	return &StartWorkflowNotFound{}
}

/* StartWorkflowNotFound describes a response with status code 404, with default header values.

Request failed. Either User or Workflow does not exist.
*/
type StartWorkflowNotFound struct {
}

func (o *StartWorkflowNotFound) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowNotFound ", 404)
}

func (o *StartWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartWorkflowConflict creates a StartWorkflowConflict with default headers values
func NewStartWorkflowConflict() *StartWorkflowConflict {
	return &StartWorkflowConflict{}
}

/* StartWorkflowConflict describes a response with status code 409, with default header values.

Request failed. The workflow could not be started due to a conflict.
*/
type StartWorkflowConflict struct {
}

func (o *StartWorkflowConflict) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowConflict ", 409)
}

func (o *StartWorkflowConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartWorkflowInternalServerError creates a StartWorkflowInternalServerError with default headers values
func NewStartWorkflowInternalServerError() *StartWorkflowInternalServerError {
	return &StartWorkflowInternalServerError{}
}

/* StartWorkflowInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal controller error.
*/
type StartWorkflowInternalServerError struct {
}

func (o *StartWorkflowInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowInternalServerError ", 500)
}

func (o *StartWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartWorkflowNotImplemented creates a StartWorkflowNotImplemented with default headers values
func NewStartWorkflowNotImplemented() *StartWorkflowNotImplemented {
	return &StartWorkflowNotImplemented{}
}

/* StartWorkflowNotImplemented describes a response with status code 501, with default header values.

Request failed. The specified status change is not implemented.
*/
type StartWorkflowNotImplemented struct {
}

func (o *StartWorkflowNotImplemented) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflow_id_or_name}/start][%d] startWorkflowNotImplemented ", 501)
}

func (o *StartWorkflowNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*StartWorkflowOKBody start workflow o k body
swagger:model StartWorkflowOKBody
*/
type StartWorkflowOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// user
	User string `json:"user,omitempty"`

	// workflow id
	WorkflowID string `json:"workflow_id,omitempty"`

	// workflow name
	WorkflowName string `json:"workflow_name,omitempty"`
}

// Validate validates this start workflow o k body
func (o *StartWorkflowOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start workflow o k body based on context it is used
func (o *StartWorkflowOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartWorkflowOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartWorkflowOKBody) UnmarshalBinary(b []byte) error {
	var res StartWorkflowOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
