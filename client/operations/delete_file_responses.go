// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteFileReader is a Reader for the DeleteFile structure.
type DeleteFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /api/workflows/{workflow_id_or_name}/workspace/{file_name}] delete_file", response, response.Code())
	}
}

// NewDeleteFileOK creates a DeleteFileOK with default headers values
func NewDeleteFileOK() *DeleteFileOK {
	return &DeleteFileOK{}
}

/*
DeleteFileOK describes a response with status code 200, with default header values.

Request succeeded. Details about deleted files and failed deletions are returned.
*/
type DeleteFileOK struct {
	Payload *DeleteFileOKBody
}

// IsSuccess returns true when this delete file o k response has a 2xx status code
func (o *DeleteFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete file o k response has a 3xx status code
func (o *DeleteFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file o k response has a 4xx status code
func (o *DeleteFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete file o k response has a 5xx status code
func (o *DeleteFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file o k response a status code equal to that given
func (o *DeleteFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete file o k response
func (o *DeleteFileOK) Code() int {
	return 200
}

func (o *DeleteFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] deleteFileOK %s", 200, payload)
}

func (o *DeleteFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] deleteFileOK %s", 200, payload)
}

func (o *DeleteFileOK) GetPayload() *DeleteFileOKBody {
	return o.Payload
}

func (o *DeleteFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteFileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileForbidden creates a DeleteFileForbidden with default headers values
func NewDeleteFileForbidden() *DeleteFileForbidden {
	return &DeleteFileForbidden{}
}

/*
DeleteFileForbidden describes a response with status code 403, with default header values.

Request failed. User is not allowed to access workflow.
*/
type DeleteFileForbidden struct {
	Payload *DeleteFileForbiddenBody
}

// IsSuccess returns true when this delete file forbidden response has a 2xx status code
func (o *DeleteFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file forbidden response has a 3xx status code
func (o *DeleteFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file forbidden response has a 4xx status code
func (o *DeleteFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file forbidden response has a 5xx status code
func (o *DeleteFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file forbidden response a status code equal to that given
func (o *DeleteFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete file forbidden response
func (o *DeleteFileForbidden) Code() int {
	return 403
}

func (o *DeleteFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] deleteFileForbidden %s", 403, payload)
}

func (o *DeleteFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] deleteFileForbidden %s", 403, payload)
}

func (o *DeleteFileForbidden) GetPayload() *DeleteFileForbiddenBody {
	return o.Payload
}

func (o *DeleteFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteFileForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileNotFound creates a DeleteFileNotFound with default headers values
func NewDeleteFileNotFound() *DeleteFileNotFound {
	return &DeleteFileNotFound{}
}

/*
DeleteFileNotFound describes a response with status code 404, with default header values.

Request failed. `file_name` does not exist.
*/
type DeleteFileNotFound struct {
	Payload *DeleteFileNotFoundBody
}

// IsSuccess returns true when this delete file not found response has a 2xx status code
func (o *DeleteFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file not found response has a 3xx status code
func (o *DeleteFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file not found response has a 4xx status code
func (o *DeleteFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file not found response has a 5xx status code
func (o *DeleteFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file not found response a status code equal to that given
func (o *DeleteFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete file not found response
func (o *DeleteFileNotFound) Code() int {
	return 404
}

func (o *DeleteFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] deleteFileNotFound %s", 404, payload)
}

func (o *DeleteFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] deleteFileNotFound %s", 404, payload)
}

func (o *DeleteFileNotFound) GetPayload() *DeleteFileNotFoundBody {
	return o.Payload
}

func (o *DeleteFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteFileNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileInternalServerError creates a DeleteFileInternalServerError with default headers values
func NewDeleteFileInternalServerError() *DeleteFileInternalServerError {
	return &DeleteFileInternalServerError{}
}

/*
DeleteFileInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal server error.
*/
type DeleteFileInternalServerError struct {
	Payload *DeleteFileInternalServerErrorBody
}

// IsSuccess returns true when this delete file internal server error response has a 2xx status code
func (o *DeleteFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file internal server error response has a 3xx status code
func (o *DeleteFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file internal server error response has a 4xx status code
func (o *DeleteFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete file internal server error response has a 5xx status code
func (o *DeleteFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete file internal server error response a status code equal to that given
func (o *DeleteFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete file internal server error response
func (o *DeleteFileInternalServerError) Code() int {
	return 500
}

func (o *DeleteFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] deleteFileInternalServerError %s", 500, payload)
}

func (o *DeleteFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/workflows/{workflow_id_or_name}/workspace/{file_name}][%d] deleteFileInternalServerError %s", 500, payload)
}

func (o *DeleteFileInternalServerError) GetPayload() *DeleteFileInternalServerErrorBody {
	return o.Payload
}

func (o *DeleteFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteFileInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteFileForbiddenBody delete file forbidden body
swagger:model DeleteFileForbiddenBody
*/
type DeleteFileForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete file forbidden body
func (o *DeleteFileForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete file forbidden body based on context it is used
func (o *DeleteFileForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteFileForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteFileForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteFileForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteFileInternalServerErrorBody delete file internal server error body
swagger:model DeleteFileInternalServerErrorBody
*/
type DeleteFileInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete file internal server error body
func (o *DeleteFileInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete file internal server error body based on context it is used
func (o *DeleteFileInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteFileInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteFileInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteFileInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteFileNotFoundBody delete file not found body
swagger:model DeleteFileNotFoundBody
*/
type DeleteFileNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete file not found body
func (o *DeleteFileNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete file not found body based on context it is used
func (o *DeleteFileNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteFileNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteFileNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteFileNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteFileOKBody delete file o k body
swagger:model DeleteFileOKBody
*/
type DeleteFileOKBody struct {

	// deleted
	Deleted map[string]DeleteFileOKBodyDeletedAnon `json:"deleted,omitempty"`

	// failed
	Failed map[string]DeleteFileOKBodyFailedAnon `json:"failed,omitempty"`
}

// Validate validates this delete file o k body
func (o *DeleteFileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFailed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteFileOKBody) validateDeleted(formats strfmt.Registry) error {
	if swag.IsZero(o.Deleted) { // not required
		return nil
	}

	for k := range o.Deleted {

		if swag.IsZero(o.Deleted[k]) { // not required
			continue
		}
		if val, ok := o.Deleted[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteFileOK" + "." + "deleted" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteFileOK" + "." + "deleted" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (o *DeleteFileOKBody) validateFailed(formats strfmt.Registry) error {
	if swag.IsZero(o.Failed) { // not required
		return nil
	}

	for k := range o.Failed {

		if swag.IsZero(o.Failed[k]) { // not required
			continue
		}
		if val, ok := o.Failed[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteFileOK" + "." + "failed" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteFileOK" + "." + "failed" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete file o k body based on the context it is used
func (o *DeleteFileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteFileOKBody) contextValidateDeleted(ctx context.Context, formats strfmt.Registry) error {

	for k := range o.Deleted {

		if val, ok := o.Deleted[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (o *DeleteFileOKBody) contextValidateFailed(ctx context.Context, formats strfmt.Registry) error {

	for k := range o.Failed {

		if val, ok := o.Failed[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteFileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteFileOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteFileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteFileOKBodyDeletedAnon delete file o k body deleted anon
swagger:model DeleteFileOKBodyDeletedAnon
*/
type DeleteFileOKBodyDeletedAnon struct {

	// size
	Size int64 `json:"size,omitempty"`
}

// Validate validates this delete file o k body deleted anon
func (o *DeleteFileOKBodyDeletedAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete file o k body deleted anon based on context it is used
func (o *DeleteFileOKBodyDeletedAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteFileOKBodyDeletedAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteFileOKBodyDeletedAnon) UnmarshalBinary(b []byte) error {
	var res DeleteFileOKBodyDeletedAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteFileOKBodyFailedAnon delete file o k body failed anon
swagger:model DeleteFileOKBodyFailedAnon
*/
type DeleteFileOKBodyFailedAnon struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this delete file o k body failed anon
func (o *DeleteFileOKBodyFailedAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete file o k body failed anon based on context it is used
func (o *DeleteFileOKBodyFailedAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteFileOKBodyFailedAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteFileOKBodyFailedAnon) UnmarshalBinary(b []byte) error {
	var res DeleteFileOKBodyFailedAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
