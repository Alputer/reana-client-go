// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteGitlabWebhookParams creates a new DeleteGitlabWebhookParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteGitlabWebhookParams() *DeleteGitlabWebhookParams {
	return &DeleteGitlabWebhookParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteGitlabWebhookParamsWithTimeout creates a new DeleteGitlabWebhookParams object
// with the ability to set a timeout on a request.
func NewDeleteGitlabWebhookParamsWithTimeout(timeout time.Duration) *DeleteGitlabWebhookParams {
	return &DeleteGitlabWebhookParams{
		timeout: timeout,
	}
}

// NewDeleteGitlabWebhookParamsWithContext creates a new DeleteGitlabWebhookParams object
// with the ability to set a context for a request.
func NewDeleteGitlabWebhookParamsWithContext(ctx context.Context) *DeleteGitlabWebhookParams {
	return &DeleteGitlabWebhookParams{
		Context: ctx,
	}
}

// NewDeleteGitlabWebhookParamsWithHTTPClient creates a new DeleteGitlabWebhookParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteGitlabWebhookParamsWithHTTPClient(client *http.Client) *DeleteGitlabWebhookParams {
	return &DeleteGitlabWebhookParams{
		HTTPClient: client,
	}
}

/* DeleteGitlabWebhookParams contains all the parameters to send to the API endpoint
   for the delete gitlab webhook operation.

   Typically these are written to a http.Request.
*/
type DeleteGitlabWebhookParams struct {

	/* HookID.

	   The GitLab webhook id of the project.
	*/
	HookID int64

	/* ProjectID.

	   The GitLab project id.
	*/
	ProjectID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete gitlab webhook params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteGitlabWebhookParams) WithDefaults() *DeleteGitlabWebhookParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete gitlab webhook params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteGitlabWebhookParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete gitlab webhook params
func (o *DeleteGitlabWebhookParams) WithTimeout(timeout time.Duration) *DeleteGitlabWebhookParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete gitlab webhook params
func (o *DeleteGitlabWebhookParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete gitlab webhook params
func (o *DeleteGitlabWebhookParams) WithContext(ctx context.Context) *DeleteGitlabWebhookParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete gitlab webhook params
func (o *DeleteGitlabWebhookParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete gitlab webhook params
func (o *DeleteGitlabWebhookParams) WithHTTPClient(client *http.Client) *DeleteGitlabWebhookParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete gitlab webhook params
func (o *DeleteGitlabWebhookParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHookID adds the hookID to the delete gitlab webhook params
func (o *DeleteGitlabWebhookParams) WithHookID(hookID int64) *DeleteGitlabWebhookParams {
	o.SetHookID(hookID)
	return o
}

// SetHookID adds the hookId to the delete gitlab webhook params
func (o *DeleteGitlabWebhookParams) SetHookID(hookID int64) {
	o.HookID = hookID
}

// WithProjectID adds the projectID to the delete gitlab webhook params
func (o *DeleteGitlabWebhookParams) WithProjectID(projectID int64) *DeleteGitlabWebhookParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the delete gitlab webhook params
func (o *DeleteGitlabWebhookParams) SetProjectID(projectID int64) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteGitlabWebhookParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param hook_id
	qrHookID := o.HookID
	qHookID := swag.FormatInt64(qrHookID)
	if qHookID != "" {

		if err := r.SetQueryParam("hook_id", qHookID); err != nil {
			return err
		}
	}

	// query param project_id
	qrProjectID := o.ProjectID
	qProjectID := swag.FormatInt64(qrProjectID)
	if qProjectID != "" {

		if err := r.SetQueryParam("project_id", qProjectID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
