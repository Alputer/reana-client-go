// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetYouReader is a Reader for the GetYou structure.
type GetYouReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetYouReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetYouOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetYouUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetYouForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetYouInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetYouOK creates a GetYouOK with default headers values
func NewGetYouOK() *GetYouOK {
	return &GetYouOK{}
}

/* GetYouOK describes a response with status code 200, with default header values.

User information correspoding to the session cookie sent in the request.
*/
type GetYouOK struct {
	Payload *GetYouOKBody
}

func (o *GetYouOK) Error() string {
	return fmt.Sprintf("[GET /api/you][%d] getYouOK  %+v", 200, o.Payload)
}
func (o *GetYouOK) GetPayload() *GetYouOKBody {
	return o.Payload
}

func (o *GetYouOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetYouOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetYouUnauthorized creates a GetYouUnauthorized with default headers values
func NewGetYouUnauthorized() *GetYouUnauthorized {
	return &GetYouUnauthorized{}
}

/* GetYouUnauthorized describes a response with status code 401, with default header values.

Error message indicating that the uses is not authenticated.
*/
type GetYouUnauthorized struct {
	Payload *GetYouUnauthorizedBody
}

func (o *GetYouUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/you][%d] getYouUnauthorized  %+v", 401, o.Payload)
}
func (o *GetYouUnauthorized) GetPayload() *GetYouUnauthorizedBody {
	return o.Payload
}

func (o *GetYouUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetYouUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetYouForbidden creates a GetYouForbidden with default headers values
func NewGetYouForbidden() *GetYouForbidden {
	return &GetYouForbidden{}
}

/* GetYouForbidden describes a response with status code 403, with default header values.

Request failed. User token not valid.
*/
type GetYouForbidden struct {
}

func (o *GetYouForbidden) Error() string {
	return fmt.Sprintf("[GET /api/you][%d] getYouForbidden ", 403)
}

func (o *GetYouForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetYouInternalServerError creates a GetYouInternalServerError with default headers values
func NewGetYouInternalServerError() *GetYouInternalServerError {
	return &GetYouInternalServerError{}
}

/* GetYouInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal server error.
*/
type GetYouInternalServerError struct {
}

func (o *GetYouInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/you][%d] getYouInternalServerError ", 500)
}

func (o *GetYouInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetYouOKBody get you o k body
swagger:model GetYouOKBody
*/
type GetYouOKBody struct {

	// email
	Email string `json:"email,omitempty"`

	// quota
	Quota *GetYouOKBodyQuota `json:"quota,omitempty"`

	// reana server version
	ReanaServerVersion string `json:"reana_server_version,omitempty"`

	// reana token
	ReanaToken *GetYouOKBodyReanaToken `json:"reana_token,omitempty"`
}

// Validate validates this get you o k body
func (o *GetYouOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReanaToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYouOKBody) validateQuota(formats strfmt.Registry) error {
	if swag.IsZero(o.Quota) { // not required
		return nil
	}

	if o.Quota != nil {
		if err := o.Quota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

func (o *GetYouOKBody) validateReanaToken(formats strfmt.Registry) error {
	if swag.IsZero(o.ReanaToken) { // not required
		return nil
	}

	if o.ReanaToken != nil {
		if err := o.ReanaToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "reana_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "reana_token")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get you o k body based on the context it is used
func (o *GetYouOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReanaToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYouOKBody) contextValidateQuota(ctx context.Context, formats strfmt.Registry) error {

	if o.Quota != nil {
		if err := o.Quota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

func (o *GetYouOKBody) contextValidateReanaToken(ctx context.Context, formats strfmt.Registry) error {

	if o.ReanaToken != nil {
		if err := o.ReanaToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "reana_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "reana_token")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetYouOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYouOKBody) UnmarshalBinary(b []byte) error {
	var res GetYouOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetYouOKBodyQuota get you o k body quota
swagger:model GetYouOKBodyQuota
*/
type GetYouOKBodyQuota struct {

	// cpu
	CPU *GetYouOKBodyQuotaCPU `json:"cpu,omitempty"`

	// disk
	Disk *GetYouOKBodyQuotaDisk `json:"disk,omitempty"`
}

// Validate validates this get you o k body quota
func (o *GetYouOKBodyQuota) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYouOKBodyQuota) validateCPU(formats strfmt.Registry) error {
	if swag.IsZero(o.CPU) { // not required
		return nil
	}

	if o.CPU != nil {
		if err := o.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "cpu")
			}
			return err
		}
	}

	return nil
}

func (o *GetYouOKBodyQuota) validateDisk(formats strfmt.Registry) error {
	if swag.IsZero(o.Disk) { // not required
		return nil
	}

	if o.Disk != nil {
		if err := o.Disk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "disk")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get you o k body quota based on the context it is used
func (o *GetYouOKBodyQuota) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYouOKBodyQuota) contextValidateCPU(ctx context.Context, formats strfmt.Registry) error {

	if o.CPU != nil {
		if err := o.CPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "cpu")
			}
			return err
		}
	}

	return nil
}

func (o *GetYouOKBodyQuota) contextValidateDisk(ctx context.Context, formats strfmt.Registry) error {

	if o.Disk != nil {
		if err := o.Disk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "disk")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetYouOKBodyQuota) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYouOKBodyQuota) UnmarshalBinary(b []byte) error {
	var res GetYouOKBodyQuota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetYouOKBodyQuotaCPU get you o k body quota CPU
swagger:model GetYouOKBodyQuotaCPU
*/
type GetYouOKBodyQuotaCPU struct {

	// health
	Health string `json:"health,omitempty"`

	// limit
	Limit *GetYouOKBodyQuotaCPULimit `json:"limit,omitempty"`

	// usage
	Usage *GetYouOKBodyQuotaCPUUsage `json:"usage,omitempty"`
}

// Validate validates this get you o k body quota CPU
func (o *GetYouOKBodyQuotaCPU) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYouOKBodyQuotaCPU) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(o.Limit) { // not required
		return nil
	}

	if o.Limit != nil {
		if err := o.Limit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "cpu" + "." + "limit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "cpu" + "." + "limit")
			}
			return err
		}
	}

	return nil
}

func (o *GetYouOKBodyQuotaCPU) validateUsage(formats strfmt.Registry) error {
	if swag.IsZero(o.Usage) { // not required
		return nil
	}

	if o.Usage != nil {
		if err := o.Usage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "cpu" + "." + "usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "cpu" + "." + "usage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get you o k body quota CPU based on the context it is used
func (o *GetYouOKBodyQuotaCPU) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYouOKBodyQuotaCPU) contextValidateLimit(ctx context.Context, formats strfmt.Registry) error {

	if o.Limit != nil {
		if err := o.Limit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "cpu" + "." + "limit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "cpu" + "." + "limit")
			}
			return err
		}
	}

	return nil
}

func (o *GetYouOKBodyQuotaCPU) contextValidateUsage(ctx context.Context, formats strfmt.Registry) error {

	if o.Usage != nil {
		if err := o.Usage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "cpu" + "." + "usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "cpu" + "." + "usage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetYouOKBodyQuotaCPU) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYouOKBodyQuotaCPU) UnmarshalBinary(b []byte) error {
	var res GetYouOKBodyQuotaCPU
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetYouOKBodyQuotaCPULimit get you o k body quota CPU limit
swagger:model GetYouOKBodyQuotaCPULimit
*/
type GetYouOKBodyQuotaCPULimit struct {

	// human readable
	HumanReadable string `json:"human_readable,omitempty"`

	// raw
	Raw float64 `json:"raw,omitempty"`
}

// Validate validates this get you o k body quota CPU limit
func (o *GetYouOKBodyQuotaCPULimit) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get you o k body quota CPU limit based on context it is used
func (o *GetYouOKBodyQuotaCPULimit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetYouOKBodyQuotaCPULimit) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYouOKBodyQuotaCPULimit) UnmarshalBinary(b []byte) error {
	var res GetYouOKBodyQuotaCPULimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetYouOKBodyQuotaCPUUsage get you o k body quota CPU usage
swagger:model GetYouOKBodyQuotaCPUUsage
*/
type GetYouOKBodyQuotaCPUUsage struct {

	// human readable
	HumanReadable string `json:"human_readable,omitempty"`

	// raw
	Raw float64 `json:"raw,omitempty"`
}

// Validate validates this get you o k body quota CPU usage
func (o *GetYouOKBodyQuotaCPUUsage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get you o k body quota CPU usage based on context it is used
func (o *GetYouOKBodyQuotaCPUUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetYouOKBodyQuotaCPUUsage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYouOKBodyQuotaCPUUsage) UnmarshalBinary(b []byte) error {
	var res GetYouOKBodyQuotaCPUUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetYouOKBodyQuotaDisk get you o k body quota disk
swagger:model GetYouOKBodyQuotaDisk
*/
type GetYouOKBodyQuotaDisk struct {

	// health
	Health string `json:"health,omitempty"`

	// limit
	Limit *GetYouOKBodyQuotaDiskLimit `json:"limit,omitempty"`

	// usage
	Usage *GetYouOKBodyQuotaDiskUsage `json:"usage,omitempty"`
}

// Validate validates this get you o k body quota disk
func (o *GetYouOKBodyQuotaDisk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYouOKBodyQuotaDisk) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(o.Limit) { // not required
		return nil
	}

	if o.Limit != nil {
		if err := o.Limit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "disk" + "." + "limit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "disk" + "." + "limit")
			}
			return err
		}
	}

	return nil
}

func (o *GetYouOKBodyQuotaDisk) validateUsage(formats strfmt.Registry) error {
	if swag.IsZero(o.Usage) { // not required
		return nil
	}

	if o.Usage != nil {
		if err := o.Usage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "disk" + "." + "usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "disk" + "." + "usage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get you o k body quota disk based on the context it is used
func (o *GetYouOKBodyQuotaDisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYouOKBodyQuotaDisk) contextValidateLimit(ctx context.Context, formats strfmt.Registry) error {

	if o.Limit != nil {
		if err := o.Limit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "disk" + "." + "limit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "disk" + "." + "limit")
			}
			return err
		}
	}

	return nil
}

func (o *GetYouOKBodyQuotaDisk) contextValidateUsage(ctx context.Context, formats strfmt.Registry) error {

	if o.Usage != nil {
		if err := o.Usage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYouOK" + "." + "quota" + "." + "disk" + "." + "usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYouOK" + "." + "quota" + "." + "disk" + "." + "usage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetYouOKBodyQuotaDisk) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYouOKBodyQuotaDisk) UnmarshalBinary(b []byte) error {
	var res GetYouOKBodyQuotaDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetYouOKBodyQuotaDiskLimit get you o k body quota disk limit
swagger:model GetYouOKBodyQuotaDiskLimit
*/
type GetYouOKBodyQuotaDiskLimit struct {

	// human readable
	HumanReadable string `json:"human_readable,omitempty"`

	// raw
	Raw float64 `json:"raw,omitempty"`
}

// Validate validates this get you o k body quota disk limit
func (o *GetYouOKBodyQuotaDiskLimit) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get you o k body quota disk limit based on context it is used
func (o *GetYouOKBodyQuotaDiskLimit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetYouOKBodyQuotaDiskLimit) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYouOKBodyQuotaDiskLimit) UnmarshalBinary(b []byte) error {
	var res GetYouOKBodyQuotaDiskLimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetYouOKBodyQuotaDiskUsage get you o k body quota disk usage
swagger:model GetYouOKBodyQuotaDiskUsage
*/
type GetYouOKBodyQuotaDiskUsage struct {

	// human readable
	HumanReadable string `json:"human_readable,omitempty"`

	// raw
	Raw float64 `json:"raw,omitempty"`
}

// Validate validates this get you o k body quota disk usage
func (o *GetYouOKBodyQuotaDiskUsage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get you o k body quota disk usage based on context it is used
func (o *GetYouOKBodyQuotaDiskUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetYouOKBodyQuotaDiskUsage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYouOKBodyQuotaDiskUsage) UnmarshalBinary(b []byte) error {
	var res GetYouOKBodyQuotaDiskUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetYouOKBodyReanaToken get you o k body reana token
swagger:model GetYouOKBodyReanaToken
*/
type GetYouOKBodyReanaToken struct {

	// requested at
	RequestedAt string `json:"requested_at,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this get you o k body reana token
func (o *GetYouOKBodyReanaToken) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get you o k body reana token based on context it is used
func (o *GetYouOKBodyReanaToken) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetYouOKBodyReanaToken) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYouOKBodyReanaToken) UnmarshalBinary(b []byte) error {
	var res GetYouOKBodyReanaToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetYouUnauthorizedBody get you unauthorized body
swagger:model GetYouUnauthorizedBody
*/
type GetYouUnauthorizedBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this get you unauthorized body
func (o *GetYouUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get you unauthorized body based on context it is used
func (o *GetYouUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetYouUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYouUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetYouUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
